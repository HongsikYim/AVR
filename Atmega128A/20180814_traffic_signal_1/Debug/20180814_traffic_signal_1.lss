
20180814_traffic_signal_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000009dc  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080013a  0080013a  00000aaa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001061  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a61  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f0  00000000  00000000  000026a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f5  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f5  00000000  00000000  000033cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000038c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a6 c0       	rjmp	.+332    	; 0x18e <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 36       	cpi	r26, 0x60	; 96
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9d d1       	rcall	.+826    	; 0x3fe <main>
  c4:	89 c4       	rjmp	.+2322   	; 0x9d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_pulse_enable>:

#include "LCD.h"

void LCD_pulse_enable(void)
{
	PORT_CONTROL |= (1 << E_PIN);
  c8:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_pulse_enable+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_pulse_enable+0xc>
  d4:	00 00       	nop
	_delay_ms(1);
	PORT_CONTROL &= ~(1 << E_PIN);
  d6:	c7 98       	cbi	0x18, 7	; 24
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_pulse_enable+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_pulse_enable+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
	PORT_CONTROL |= (1 << RS_PIN);
  e6:	c5 9a       	sbi	0x18, 5	; 24
	PORT_DATA = data;
  e8:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
  ea:	ee df       	rcall	.-36     	; 0xc8 <LCD_pulse_enable>
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9f e1       	ldi	r25, 0x1F	; 31
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_write_data+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_write_data+0x10>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <LCD_write_command>:
	_delay_ms(2);
}

void LCD_write_command(uint8_t command)
{
	PORT_CONTROL &= ~(1 << RS_PIN);
  fa:	c5 98       	cbi	0x18, 5	; 24
	PORT_DATA = command;
  fc:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
  fe:	e4 df       	rcall	.-56     	; 0xc8 <LCD_pulse_enable>
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_write_command+0xa>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_write_command+0x10>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	f4 df       	rcall	.-24     	; 0xfa <LCD_write_command>
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_clear+0x8>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_clear+0xe>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_init>:
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <LCD_init+0x6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_init+0x10>
 130:	00 00       	nop
void LCD_init(void)
{
	_delay_ms(50);
	
	// 연결 핀을 출력을 설정
	DDR_DATA = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
 136:	15 ba       	out	0x15, r1	; 21
	DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	80 6e       	ori	r24, 0xE0	; 224
 13c:	87 bb       	out	0x17, r24	; 23
	
	// R/W 핀으로 LOW를 출력하여 쓰기 전용으로 사용
	PORT_CONTROL &= ~(1<< RW_PIN);
 13e:	c6 98       	cbi	0x18, 6	; 24
	
	LCD_write_command(COMMAND_8_BIT_MODE);
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	db df       	rcall	.-74     	; 0xfa <LCD_write_command>
	
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 144:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_clear();
 146:	d9 df       	rcall	.-78     	; 0xfa <LCD_write_command>
	
	LCD_write_command(0x06);
 148:	e2 df       	rcall	.-60     	; 0x10e <LCD_clear>
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	d6 cf       	rjmp	.-84     	; 0xfa <LCD_write_command>
 14e:	08 95       	ret

00000150 <LCD_write_string>:
}

void LCD_write_string(char *string)
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; string[i]; i ++)
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <LCD_write_string+0x22>
 15e:	8f 01       	movw	r16, r30
 160:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_write_data(string[i]);
 162:	c1 df       	rcall	.-126    	; 0xe6 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i = 0; string[i]; i ++)
 164:	cf 5f       	subi	r28, 0xFF	; 255
 166:	f8 01       	movw	r30, r16
 168:	ec 0f       	add	r30, r28
 16a:	f1 1d       	adc	r31, r1
 16c:	80 81       	ld	r24, Z
 16e:	81 11       	cpse	r24, r1
 170:	f8 cf       	rjmp	.-16     	; 0x162 <LCD_write_string+0x12>
	{
		LCD_write_data(string[i]);
	}
}
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	6f 70       	andi	r22, 0x0F	; 15
 17e:	90 e4       	ldi	r25, 0x40	; 64
 180:	89 9f       	mul	r24, r25
 182:	60 0d       	add	r22, r0
 184:	11 24       	eor	r1, r1
 186:	86 2f       	mov	r24, r22
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	b7 cf       	rjmp	.-146    	; 0xfa <LCD_write_command>
 18c:	08 95       	ret

0000018e <__vector_16>:

enum {RG = 0, RY, GR, YR};
uint8_t signal_state = RG;

ISR(TIMER0_OVF_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
	count++;
 19c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <count>
 1a0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <count+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <count+0x1>
 1aa:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <count>
	if(count == 10)
 1ae:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <count>
 1b2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <count+0x1>
 1b6:	0a 97       	sbiw	r24, 0x0a	; 10
 1b8:	49 f4       	brne	.+18     	; 0x1cc <__vector_16+0x3e>
	{
		count = 0;
 1ba:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <count+0x1>
 1be:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <count>
		ms++;
 1c2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ms>
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ms>
	}
	TCNT0 = 256 - 250;
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	82 bf       	out	0x32, r24	; 50
}
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <INTERRUPT>:

void INTERRUPT(void)
{
	//인터럽트
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // 분주비
 1de:	83 b7       	in	r24, 0x33	; 51
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
 1e4:	87 b7       	in	r24, 0x37	; 55
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	87 bf       	out	0x37, r24	; 55
	
	sei();
 1ea:	78 94       	sei
 1ec:	08 95       	ret

000001ee <CLOCK>:
}

void CLOCK(void)
{
	//시계
	if(hr >= 12)
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f2:	8c 30       	cpi	r24, 0x0C	; 12
 1f4:	38 f0       	brcs	.+14     	; 0x204 <CLOCK+0x16>
	{
		hr=0;
 1f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		day = ~day;
 1fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <day>
 1fe:	80 95       	com	r24
 200:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <day>
	}
	
	if (ms > 100)
 204:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ms>
 208:	85 36       	cpi	r24, 0x65	; 101
 20a:	b8 f1       	brcs	.+110    	; 0x27a <CLOCK+0x8c>
	{
		ms=0;
 20c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <ms>
		ss++;
 210:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ss>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ss>
		t_standard++;
 21a:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <t_standard>
 21e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <t_standard+0x1>
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <t_standard+0x1>
 22a:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <t_standard>
		if(t_standard >= 10)
 22e:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <t_standard>
 232:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <t_standard+0x1>
 236:	2a 30       	cpi	r18, 0x0A	; 10
 238:	31 05       	cpc	r19, r1
 23a:	24 f0       	brlt	.+8      	; 0x244 <CLOCK+0x56>
		{
			t_standard = 0;
 23c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <t_standard+0x1>
 240:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <t_standard>
		}
		if (ss >= 60)
 244:	8c 33       	cpi	r24, 0x3C	; 60
 246:	c8 f0       	brcs	.+50     	; 0x27a <CLOCK+0x8c>
		{
			ss=0;
 248:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ss>
			mm++;
 24c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <mm>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <mm>
			if (mm >= 60)
 256:	8c 33       	cpi	r24, 0x3C	; 60
 258:	80 f0       	brcs	.+32     	; 0x27a <CLOCK+0x8c>
			{
				hr++;
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				mm=00;
 264:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <mm>
				if(hr >= 12)
 268:	8c 30       	cpi	r24, 0x0C	; 12
 26a:	38 f0       	brcs	.+14     	; 0x27a <CLOCK+0x8c>
				{
					hr=0;
 26c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					ss=0;
					day = ~day;
 270:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <day>
 274:	80 95       	com	r24
 276:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <day>
 27a:	08 95       	ret

0000027c <LCD_DISPLAY>:
}

void LCD_DISPLAY(void)
{
	//LCD_DISPLAY
	LCD_goto_XY(1,0);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	7c df       	rcall	.-264    	; 0x17a <LCD_goto_XY>
	sprintf(buff, "%02d:%02d:%02d:%02d", hr, mm, ss, ms);
 282:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ms>
 286:	1f 92       	push	r1
 288:	8f 93       	push	r24
 28a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ss>
 28e:	1f 92       	push	r1
 290:	8f 93       	push	r24
 292:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <mm>
 296:	1f 92       	push	r1
 298:	8f 93       	push	r24
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29e:	1f 92       	push	r1
 2a0:	8f 93       	push	r24
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	9f 93       	push	r25
 2a8:	8f 93       	push	r24
 2aa:	82 e4       	ldi	r24, 0x42	; 66
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	9f 93       	push	r25
 2b0:	8f 93       	push	r24
 2b2:	b7 d0       	rcall	.+366    	; 0x422 <sprintf>
	LCD_write_string(buff);
 2b4:	82 e4       	ldi	r24, 0x42	; 66
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	4b df       	rcall	.-362    	; 0x150 <LCD_write_string>
	
	if(day)
 2ba:	8d b7       	in	r24, 0x3d	; 61
 2bc:	9e b7       	in	r25, 0x3e	; 62
 2be:	0c 96       	adiw	r24, 0x0c	; 12
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	9e bf       	out	0x3e, r25	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	8d bf       	out	0x3d, r24	; 61
 2ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <day>
 2ce:	88 23       	and	r24, r24
	LCD_write_string(" AM");
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <LCD_DISPLAY+0x64>
 2d2:	86 e1       	ldi	r24, 0x16	; 22
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	3c df       	rcall	.-392    	; 0x150 <LCD_write_string>
	if(day == 0)
 2d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <day>
 2dc:	81 11       	cpse	r24, r1
	LCD_write_string(" PM");
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <LCD_DISPLAY+0x6a>
 2e0:	8a e1       	ldi	r24, 0x1A	; 26
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	35 cf       	rjmp	.-406    	; 0x150 <LCD_write_string>
 2e6:	08 95       	ret

000002e8 <TRAFFIC_SIGNAL>:
}

void TRAFFIC_SIGNAL(void)
{
	//신호등
	DDRD = 0xFF;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;
 2ec:	82 bb       	out	0x12, r24	; 18
	
	switch(signal_state)
 2ee:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	41 f1       	breq	.+80     	; 0x346 <TRAFFIC_SIGNAL+0x5e>
 2f6:	38 f0       	brcs	.+14     	; 0x306 <TRAFFIC_SIGNAL+0x1e>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	09 f4       	brne	.+2      	; 0x2fe <TRAFFIC_SIGNAL+0x16>
 2fc:	44 c0       	rjmp	.+136    	; 0x386 <TRAFFIC_SIGNAL+0x9e>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	09 f4       	brne	.+2      	; 0x304 <TRAFFIC_SIGNAL+0x1c>
 302:	5f c0       	rjmp	.+190    	; 0x3c2 <TRAFFIC_SIGNAL+0xda>
 304:	08 95       	ret
	{
		case RG :
		PORTD = (1 << RowRed) | (1 << ColGreen);
 306:	89 e0       	ldi	r24, 0x09	; 9
 308:	82 bb       	out	0x12, r24	; 18
		LCD_goto_XY(0,12);
 30a:	6c e0       	ldi	r22, 0x0C	; 12
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	35 df       	rcall	.-406    	; 0x17a <LCD_goto_XY>
		LCD_write_string("R/");
 310:	8e e1       	ldi	r24, 0x1E	; 30
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	1d df       	rcall	.-454    	; 0x150 <LCD_write_string>
		LCD_goto_XY(0,14);
 316:	6e e0       	ldi	r22, 0x0E	; 14
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	2f df       	rcall	.-418    	; 0x17a <LCD_goto_XY>
		LCD_write_string("G");
 31c:	81 e2       	ldi	r24, 0x21	; 33
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	17 df       	rcall	.-466    	; 0x150 <LCD_write_string>
 322:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
		if(t_standard >= 4 && t_standard < 5)
 326:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 32a:	04 97       	sbiw	r24, 0x04	; 4
 32c:	0c f4       	brge	.+2      	; 0x330 <TRAFFIC_SIGNAL+0x48>
 32e:	66 c0       	rjmp	.+204    	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 330:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
 334:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 338:	05 97       	sbiw	r24, 0x05	; 5
 33a:	0c f0       	brlt	.+2      	; 0x33e <TRAFFIC_SIGNAL+0x56>
 33c:	5f c0       	rjmp	.+190    	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 33e:	81 e0       	ldi	r24, 0x01	; 1
		signal_state = RY;
 340:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 344:	08 95       	ret
 346:	81 e1       	ldi	r24, 0x11	; 17
		break;
		
		case RY :
		PORTD = (1 << RowRed) | (1 << ColYellow);
 348:	82 bb       	out	0x12, r24	; 18
		LCD_goto_XY(0,12);
 34a:	6c e0       	ldi	r22, 0x0C	; 12
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	15 df       	rcall	.-470    	; 0x17a <LCD_goto_XY>
		LCD_write_string("R/");
 350:	8e e1       	ldi	r24, 0x1E	; 30
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	fd de       	rcall	.-518    	; 0x150 <LCD_write_string>
		LCD_goto_XY(0,14);
 356:	6e e0       	ldi	r22, 0x0E	; 14
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0f df       	rcall	.-482    	; 0x17a <LCD_goto_XY>
 35c:	83 e2       	ldi	r24, 0x23	; 35
		LCD_write_string("Y");
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	f7 de       	rcall	.-530    	; 0x150 <LCD_write_string>
 362:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
		if(t_standard >= 5 && t_standard < 9)
 366:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 36a:	05 97       	sbiw	r24, 0x05	; 5
 36c:	0c f4       	brge	.+2      	; 0x370 <TRAFFIC_SIGNAL+0x88>
 36e:	46 c0       	rjmp	.+140    	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 370:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
 374:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 378:	09 97       	sbiw	r24, 0x09	; 9
 37a:	0c f0       	brlt	.+2      	; 0x37e <TRAFFIC_SIGNAL+0x96>
 37c:	3f c0       	rjmp	.+126    	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
		signal_state = GR;
 384:	08 95       	ret
 386:	84 e2       	ldi	r24, 0x24	; 36
		break;
		
		case GR :
		PORTD = (1 << RowGreen) | (1 << ColRed);
 388:	82 bb       	out	0x12, r24	; 18
 38a:	6c e0       	ldi	r22, 0x0C	; 12
		LCD_goto_XY(0,12);
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	f5 de       	rcall	.-534    	; 0x17a <LCD_goto_XY>
 390:	85 e2       	ldi	r24, 0x25	; 37
		LCD_write_string("G/");
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	dd de       	rcall	.-582    	; 0x150 <LCD_write_string>
 396:	6e e0       	ldi	r22, 0x0E	; 14
 398:	80 e0       	ldi	r24, 0x00	; 0
		LCD_goto_XY(0,14);
 39a:	ef de       	rcall	.-546    	; 0x17a <LCD_goto_XY>
 39c:	88 e2       	ldi	r24, 0x28	; 40
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	d7 de       	rcall	.-594    	; 0x150 <LCD_write_string>
		LCD_write_string("R");
 3a2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
 3a6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
		if(t_standard >= 9 && t_standard < 10)
 3aa:	09 97       	sbiw	r24, 0x09	; 9
 3ac:	3c f1       	brlt	.+78     	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 3ae:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
 3b2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 3b6:	0a 97       	sbiw	r24, 0x0a	; 10
 3b8:	0c f5       	brge	.+66     	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
		signal_state = YR;
 3c0:	08 95       	ret
 3c2:	82 e2       	ldi	r24, 0x22	; 34
 3c4:	82 bb       	out	0x12, r24	; 18
		break;
		
		case YR :
		PORTD = (1 << RowYellow) | (1 << ColRed);
 3c6:	82 bb       	out	0x12, r24	; 18
 3c8:	6c e0       	ldi	r22, 0x0C	; 12
		PORTD = 0x22;
		LCD_goto_XY(0,12);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	d6 de       	rcall	.-596    	; 0x17a <LCD_goto_XY>
 3ce:	8a e2       	ldi	r24, 0x2A	; 42
 3d0:	91 e0       	ldi	r25, 0x01	; 1
		LCD_write_string("Y/");
 3d2:	be de       	rcall	.-644    	; 0x150 <LCD_write_string>
 3d4:	6e e0       	ldi	r22, 0x0E	; 14
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	d0 de       	rcall	.-608    	; 0x17a <LCD_goto_XY>
		LCD_goto_XY(0,14);
 3da:	88 e2       	ldi	r24, 0x28	; 40
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	b8 de       	rcall	.-656    	; 0x150 <LCD_write_string>
 3e0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
		LCD_write_string("R");
 3e4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 3e8:	04 97       	sbiw	r24, 0x04	; 4
		if(t_standard < 4 && t_standard >= 0)//
 3ea:	44 f4       	brge	.+16     	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 3ec:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <t_standard>
 3f0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <t_standard+0x1>
 3f4:	99 23       	and	r25, r25
 3f6:	14 f0       	brlt	.+4      	; 0x3fc <TRAFFIC_SIGNAL+0x114>
 3f8:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
 3fc:	08 95       	ret

000003fe <main>:
 3fe:	90 de       	rcall	.-736    	; 0x120 <LCD_init>
 400:	8d e2       	ldi	r24, 0x2D	; 45
		signal_state = RG;
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	a5 de       	rcall	.-694    	; 0x150 <LCD_write_string>
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	8d e3       	ldi	r24, 0x3D	; 61
 40a:	99 e4       	ldi	r25, 0x49	; 73
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	
	LCD_write_string("Trf_Signal:");
	_delay_ms(1500);
	
	//인터럽트
	INTERRUPT();
 416:	00 00       	nop
	
	/* Replace with your application code */
	while (1)
	{
		//시계
		CLOCK();
 418:	e2 de       	rcall	.-572    	; 0x1de <INTERRUPT>
 41a:	e9 de       	rcall	.-558    	; 0x1ee <CLOCK>
		
		//화면
		LCD_DISPLAY();
 41c:	2f df       	rcall	.-418    	; 0x27c <LCD_DISPLAY>
 41e:	64 df       	rcall	.-312    	; 0x2e8 <TRAFFIC_SIGNAL>
		
		//신호등
		TRAFFIC_SIGNAL();
 420:	fc cf       	rjmp	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

00000422 <sprintf>:
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	2e 97       	sbiw	r28, 0x0e	; 14
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	0d 89       	ldd	r16, Y+21	; 0x15
 43c:	1e 89       	ldd	r17, Y+22	; 0x16
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	8c 83       	std	Y+4, r24	; 0x04
 442:	1a 83       	std	Y+2, r17	; 0x02
 444:	09 83       	std	Y+1, r16	; 0x01
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	9f e7       	ldi	r25, 0x7F	; 127
 44a:	9e 83       	std	Y+6, r25	; 0x06
 44c:	8d 83       	std	Y+5, r24	; 0x05
 44e:	ae 01       	movw	r20, r28
 450:	47 5e       	subi	r20, 0xE7	; 231
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	6f 89       	ldd	r22, Y+23	; 0x17
 456:	78 8d       	ldd	r23, Y+24	; 0x18
 458:	ce 01       	movw	r24, r28
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	10 d0       	rcall	.+32     	; 0x47e <vfprintf>
 45e:	ef 81       	ldd	r30, Y+7	; 0x07
 460:	f8 85       	ldd	r31, Y+8	; 0x08
 462:	e0 0f       	add	r30, r16
 464:	f1 1f       	adc	r31, r17
 466:	10 82       	st	Z, r1
 468:	2e 96       	adiw	r28, 0x0e	; 14
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <vfprintf>:
 47e:	2f 92       	push	r2
 480:	3f 92       	push	r3
 482:	4f 92       	push	r4
 484:	5f 92       	push	r5
 486:	6f 92       	push	r6
 488:	7f 92       	push	r7
 48a:	8f 92       	push	r8
 48c:	9f 92       	push	r9
 48e:	af 92       	push	r10
 490:	bf 92       	push	r11
 492:	cf 92       	push	r12
 494:	df 92       	push	r13
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	2b 97       	sbiw	r28, 0x0b	; 11
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	6c 01       	movw	r12, r24
 4b4:	7b 01       	movw	r14, r22
 4b6:	8a 01       	movw	r16, r20
 4b8:	fc 01       	movw	r30, r24
 4ba:	17 82       	std	Z+7, r1	; 0x07
 4bc:	16 82       	std	Z+6, r1	; 0x06
 4be:	83 81       	ldd	r24, Z+3	; 0x03
 4c0:	81 ff       	sbrs	r24, 1
 4c2:	bf c1       	rjmp	.+894    	; 0x842 <vfprintf+0x3c4>
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	3c 01       	movw	r6, r24
 4ca:	f6 01       	movw	r30, r12
 4cc:	93 81       	ldd	r25, Z+3	; 0x03
 4ce:	f7 01       	movw	r30, r14
 4d0:	93 fd       	sbrc	r25, 3
 4d2:	85 91       	lpm	r24, Z+
 4d4:	93 ff       	sbrs	r25, 3
 4d6:	81 91       	ld	r24, Z+
 4d8:	7f 01       	movw	r14, r30
 4da:	88 23       	and	r24, r24
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <vfprintf+0x62>
 4de:	ad c1       	rjmp	.+858    	; 0x83a <vfprintf+0x3bc>
 4e0:	85 32       	cpi	r24, 0x25	; 37
 4e2:	39 f4       	brne	.+14     	; 0x4f2 <vfprintf+0x74>
 4e4:	93 fd       	sbrc	r25, 3
 4e6:	85 91       	lpm	r24, Z+
 4e8:	93 ff       	sbrs	r25, 3
 4ea:	81 91       	ld	r24, Z+
 4ec:	7f 01       	movw	r14, r30
 4ee:	85 32       	cpi	r24, 0x25	; 37
 4f0:	21 f4       	brne	.+8      	; 0x4fa <vfprintf+0x7c>
 4f2:	b6 01       	movw	r22, r12
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	d6 d1       	rcall	.+940    	; 0x8a4 <fputc>
 4f8:	e8 cf       	rjmp	.-48     	; 0x4ca <vfprintf+0x4c>
 4fa:	91 2c       	mov	r9, r1
 4fc:	21 2c       	mov	r2, r1
 4fe:	31 2c       	mov	r3, r1
 500:	ff e1       	ldi	r31, 0x1F	; 31
 502:	f3 15       	cp	r31, r3
 504:	d8 f0       	brcs	.+54     	; 0x53c <vfprintf+0xbe>
 506:	8b 32       	cpi	r24, 0x2B	; 43
 508:	79 f0       	breq	.+30     	; 0x528 <vfprintf+0xaa>
 50a:	38 f4       	brcc	.+14     	; 0x51a <vfprintf+0x9c>
 50c:	80 32       	cpi	r24, 0x20	; 32
 50e:	79 f0       	breq	.+30     	; 0x52e <vfprintf+0xb0>
 510:	83 32       	cpi	r24, 0x23	; 35
 512:	a1 f4       	brne	.+40     	; 0x53c <vfprintf+0xbe>
 514:	23 2d       	mov	r18, r3
 516:	20 61       	ori	r18, 0x10	; 16
 518:	1d c0       	rjmp	.+58     	; 0x554 <vfprintf+0xd6>
 51a:	8d 32       	cpi	r24, 0x2D	; 45
 51c:	61 f0       	breq	.+24     	; 0x536 <vfprintf+0xb8>
 51e:	80 33       	cpi	r24, 0x30	; 48
 520:	69 f4       	brne	.+26     	; 0x53c <vfprintf+0xbe>
 522:	23 2d       	mov	r18, r3
 524:	21 60       	ori	r18, 0x01	; 1
 526:	16 c0       	rjmp	.+44     	; 0x554 <vfprintf+0xd6>
 528:	83 2d       	mov	r24, r3
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	38 2e       	mov	r3, r24
 52e:	e3 2d       	mov	r30, r3
 530:	e4 60       	ori	r30, 0x04	; 4
 532:	3e 2e       	mov	r3, r30
 534:	2a c0       	rjmp	.+84     	; 0x58a <vfprintf+0x10c>
 536:	f3 2d       	mov	r31, r3
 538:	f8 60       	ori	r31, 0x08	; 8
 53a:	1d c0       	rjmp	.+58     	; 0x576 <vfprintf+0xf8>
 53c:	37 fc       	sbrc	r3, 7
 53e:	2d c0       	rjmp	.+90     	; 0x59a <vfprintf+0x11c>
 540:	20 ed       	ldi	r18, 0xD0	; 208
 542:	28 0f       	add	r18, r24
 544:	2a 30       	cpi	r18, 0x0A	; 10
 546:	40 f0       	brcs	.+16     	; 0x558 <vfprintf+0xda>
 548:	8e 32       	cpi	r24, 0x2E	; 46
 54a:	b9 f4       	brne	.+46     	; 0x57a <vfprintf+0xfc>
 54c:	36 fc       	sbrc	r3, 6
 54e:	75 c1       	rjmp	.+746    	; 0x83a <vfprintf+0x3bc>
 550:	23 2d       	mov	r18, r3
 552:	20 64       	ori	r18, 0x40	; 64
 554:	32 2e       	mov	r3, r18
 556:	19 c0       	rjmp	.+50     	; 0x58a <vfprintf+0x10c>
 558:	36 fe       	sbrs	r3, 6
 55a:	06 c0       	rjmp	.+12     	; 0x568 <vfprintf+0xea>
 55c:	8a e0       	ldi	r24, 0x0A	; 10
 55e:	98 9e       	mul	r9, r24
 560:	20 0d       	add	r18, r0
 562:	11 24       	eor	r1, r1
 564:	92 2e       	mov	r9, r18
 566:	11 c0       	rjmp	.+34     	; 0x58a <vfprintf+0x10c>
 568:	ea e0       	ldi	r30, 0x0A	; 10
 56a:	2e 9e       	mul	r2, r30
 56c:	20 0d       	add	r18, r0
 56e:	11 24       	eor	r1, r1
 570:	22 2e       	mov	r2, r18
 572:	f3 2d       	mov	r31, r3
 574:	f0 62       	ori	r31, 0x20	; 32
 576:	3f 2e       	mov	r3, r31
 578:	08 c0       	rjmp	.+16     	; 0x58a <vfprintf+0x10c>
 57a:	8c 36       	cpi	r24, 0x6C	; 108
 57c:	21 f4       	brne	.+8      	; 0x586 <vfprintf+0x108>
 57e:	83 2d       	mov	r24, r3
 580:	80 68       	ori	r24, 0x80	; 128
 582:	38 2e       	mov	r3, r24
 584:	02 c0       	rjmp	.+4      	; 0x58a <vfprintf+0x10c>
 586:	88 36       	cpi	r24, 0x68	; 104
 588:	41 f4       	brne	.+16     	; 0x59a <vfprintf+0x11c>
 58a:	f7 01       	movw	r30, r14
 58c:	93 fd       	sbrc	r25, 3
 58e:	85 91       	lpm	r24, Z+
 590:	93 ff       	sbrs	r25, 3
 592:	81 91       	ld	r24, Z+
 594:	7f 01       	movw	r14, r30
 596:	81 11       	cpse	r24, r1
 598:	b3 cf       	rjmp	.-154    	; 0x500 <vfprintf+0x82>
 59a:	98 2f       	mov	r25, r24
 59c:	9f 7d       	andi	r25, 0xDF	; 223
 59e:	95 54       	subi	r25, 0x45	; 69
 5a0:	93 30       	cpi	r25, 0x03	; 3
 5a2:	28 f4       	brcc	.+10     	; 0x5ae <vfprintf+0x130>
 5a4:	0c 5f       	subi	r16, 0xFC	; 252
 5a6:	1f 4f       	sbci	r17, 0xFF	; 255
 5a8:	9f e3       	ldi	r25, 0x3F	; 63
 5aa:	99 83       	std	Y+1, r25	; 0x01
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <vfprintf+0x14a>
 5ae:	83 36       	cpi	r24, 0x63	; 99
 5b0:	31 f0       	breq	.+12     	; 0x5be <vfprintf+0x140>
 5b2:	83 37       	cpi	r24, 0x73	; 115
 5b4:	71 f0       	breq	.+28     	; 0x5d2 <vfprintf+0x154>
 5b6:	83 35       	cpi	r24, 0x53	; 83
 5b8:	09 f0       	breq	.+2      	; 0x5bc <vfprintf+0x13e>
 5ba:	55 c0       	rjmp	.+170    	; 0x666 <vfprintf+0x1e8>
 5bc:	20 c0       	rjmp	.+64     	; 0x5fe <vfprintf+0x180>
 5be:	f8 01       	movw	r30, r16
 5c0:	80 81       	ld	r24, Z
 5c2:	89 83       	std	Y+1, r24	; 0x01
 5c4:	0e 5f       	subi	r16, 0xFE	; 254
 5c6:	1f 4f       	sbci	r17, 0xFF	; 255
 5c8:	88 24       	eor	r8, r8
 5ca:	83 94       	inc	r8
 5cc:	91 2c       	mov	r9, r1
 5ce:	53 01       	movw	r10, r6
 5d0:	12 c0       	rjmp	.+36     	; 0x5f6 <vfprintf+0x178>
 5d2:	28 01       	movw	r4, r16
 5d4:	f2 e0       	ldi	r31, 0x02	; 2
 5d6:	4f 0e       	add	r4, r31
 5d8:	51 1c       	adc	r5, r1
 5da:	f8 01       	movw	r30, r16
 5dc:	a0 80       	ld	r10, Z
 5de:	b1 80       	ldd	r11, Z+1	; 0x01
 5e0:	36 fe       	sbrs	r3, 6
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <vfprintf+0x16c>
 5e4:	69 2d       	mov	r22, r9
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vfprintf+0x170>
 5ea:	6f ef       	ldi	r22, 0xFF	; 255
 5ec:	7f ef       	ldi	r23, 0xFF	; 255
 5ee:	c5 01       	movw	r24, r10
 5f0:	4e d1       	rcall	.+668    	; 0x88e <strnlen>
 5f2:	4c 01       	movw	r8, r24
 5f4:	82 01       	movw	r16, r4
 5f6:	f3 2d       	mov	r31, r3
 5f8:	ff 77       	andi	r31, 0x7F	; 127
 5fa:	3f 2e       	mov	r3, r31
 5fc:	15 c0       	rjmp	.+42     	; 0x628 <vfprintf+0x1aa>
 5fe:	28 01       	movw	r4, r16
 600:	22 e0       	ldi	r18, 0x02	; 2
 602:	42 0e       	add	r4, r18
 604:	51 1c       	adc	r5, r1
 606:	f8 01       	movw	r30, r16
 608:	a0 80       	ld	r10, Z
 60a:	b1 80       	ldd	r11, Z+1	; 0x01
 60c:	36 fe       	sbrs	r3, 6
 60e:	03 c0       	rjmp	.+6      	; 0x616 <vfprintf+0x198>
 610:	69 2d       	mov	r22, r9
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <vfprintf+0x19c>
 616:	6f ef       	ldi	r22, 0xFF	; 255
 618:	7f ef       	ldi	r23, 0xFF	; 255
 61a:	c5 01       	movw	r24, r10
 61c:	2d d1       	rcall	.+602    	; 0x878 <strnlen_P>
 61e:	4c 01       	movw	r8, r24
 620:	f3 2d       	mov	r31, r3
 622:	f0 68       	ori	r31, 0x80	; 128
 624:	3f 2e       	mov	r3, r31
 626:	82 01       	movw	r16, r4
 628:	33 fc       	sbrc	r3, 3
 62a:	19 c0       	rjmp	.+50     	; 0x65e <vfprintf+0x1e0>
 62c:	82 2d       	mov	r24, r2
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	88 16       	cp	r8, r24
 632:	99 06       	cpc	r9, r25
 634:	a0 f4       	brcc	.+40     	; 0x65e <vfprintf+0x1e0>
 636:	b6 01       	movw	r22, r12
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	33 d1       	rcall	.+614    	; 0x8a4 <fputc>
 63e:	2a 94       	dec	r2
 640:	f5 cf       	rjmp	.-22     	; 0x62c <vfprintf+0x1ae>
 642:	f5 01       	movw	r30, r10
 644:	37 fc       	sbrc	r3, 7
 646:	85 91       	lpm	r24, Z+
 648:	37 fe       	sbrs	r3, 7
 64a:	81 91       	ld	r24, Z+
 64c:	5f 01       	movw	r10, r30
 64e:	b6 01       	movw	r22, r12
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	28 d1       	rcall	.+592    	; 0x8a4 <fputc>
 654:	21 10       	cpse	r2, r1
 656:	2a 94       	dec	r2
 658:	21 e0       	ldi	r18, 0x01	; 1
 65a:	82 1a       	sub	r8, r18
 65c:	91 08       	sbc	r9, r1
 65e:	81 14       	cp	r8, r1
 660:	91 04       	cpc	r9, r1
 662:	79 f7       	brne	.-34     	; 0x642 <vfprintf+0x1c4>
 664:	e1 c0       	rjmp	.+450    	; 0x828 <vfprintf+0x3aa>
 666:	84 36       	cpi	r24, 0x64	; 100
 668:	11 f0       	breq	.+4      	; 0x66e <vfprintf+0x1f0>
 66a:	89 36       	cpi	r24, 0x69	; 105
 66c:	39 f5       	brne	.+78     	; 0x6bc <vfprintf+0x23e>
 66e:	f8 01       	movw	r30, r16
 670:	37 fe       	sbrs	r3, 7
 672:	07 c0       	rjmp	.+14     	; 0x682 <vfprintf+0x204>
 674:	60 81       	ld	r22, Z
 676:	71 81       	ldd	r23, Z+1	; 0x01
 678:	82 81       	ldd	r24, Z+2	; 0x02
 67a:	93 81       	ldd	r25, Z+3	; 0x03
 67c:	0c 5f       	subi	r16, 0xFC	; 252
 67e:	1f 4f       	sbci	r17, 0xFF	; 255
 680:	08 c0       	rjmp	.+16     	; 0x692 <vfprintf+0x214>
 682:	60 81       	ld	r22, Z
 684:	71 81       	ldd	r23, Z+1	; 0x01
 686:	07 2e       	mov	r0, r23
 688:	00 0c       	add	r0, r0
 68a:	88 0b       	sbc	r24, r24
 68c:	99 0b       	sbc	r25, r25
 68e:	0e 5f       	subi	r16, 0xFE	; 254
 690:	1f 4f       	sbci	r17, 0xFF	; 255
 692:	f3 2d       	mov	r31, r3
 694:	ff 76       	andi	r31, 0x6F	; 111
 696:	3f 2e       	mov	r3, r31
 698:	97 ff       	sbrs	r25, 7
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <vfprintf+0x230>
 69c:	90 95       	com	r25
 69e:	80 95       	com	r24
 6a0:	70 95       	com	r23
 6a2:	61 95       	neg	r22
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	8f 4f       	sbci	r24, 0xFF	; 255
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	f0 68       	ori	r31, 0x80	; 128
 6ac:	3f 2e       	mov	r3, r31
 6ae:	2a e0       	ldi	r18, 0x0A	; 10
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	a3 01       	movw	r20, r6
 6b4:	33 d1       	rcall	.+614    	; 0x91c <__ultoa_invert>
 6b6:	88 2e       	mov	r8, r24
 6b8:	86 18       	sub	r8, r6
 6ba:	44 c0       	rjmp	.+136    	; 0x744 <vfprintf+0x2c6>
 6bc:	85 37       	cpi	r24, 0x75	; 117
 6be:	31 f4       	brne	.+12     	; 0x6cc <vfprintf+0x24e>
 6c0:	23 2d       	mov	r18, r3
 6c2:	2f 7e       	andi	r18, 0xEF	; 239
 6c4:	b2 2e       	mov	r11, r18
 6c6:	2a e0       	ldi	r18, 0x0A	; 10
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	25 c0       	rjmp	.+74     	; 0x716 <vfprintf+0x298>
 6cc:	93 2d       	mov	r25, r3
 6ce:	99 7f       	andi	r25, 0xF9	; 249
 6d0:	b9 2e       	mov	r11, r25
 6d2:	8f 36       	cpi	r24, 0x6F	; 111
 6d4:	c1 f0       	breq	.+48     	; 0x706 <vfprintf+0x288>
 6d6:	18 f4       	brcc	.+6      	; 0x6de <vfprintf+0x260>
 6d8:	88 35       	cpi	r24, 0x58	; 88
 6da:	79 f0       	breq	.+30     	; 0x6fa <vfprintf+0x27c>
 6dc:	ae c0       	rjmp	.+348    	; 0x83a <vfprintf+0x3bc>
 6de:	80 37       	cpi	r24, 0x70	; 112
 6e0:	19 f0       	breq	.+6      	; 0x6e8 <vfprintf+0x26a>
 6e2:	88 37       	cpi	r24, 0x78	; 120
 6e4:	21 f0       	breq	.+8      	; 0x6ee <vfprintf+0x270>
 6e6:	a9 c0       	rjmp	.+338    	; 0x83a <vfprintf+0x3bc>
 6e8:	e9 2f       	mov	r30, r25
 6ea:	e0 61       	ori	r30, 0x10	; 16
 6ec:	be 2e       	mov	r11, r30
 6ee:	b4 fe       	sbrs	r11, 4
 6f0:	0d c0       	rjmp	.+26     	; 0x70c <vfprintf+0x28e>
 6f2:	fb 2d       	mov	r31, r11
 6f4:	f4 60       	ori	r31, 0x04	; 4
 6f6:	bf 2e       	mov	r11, r31
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <vfprintf+0x28e>
 6fa:	34 fe       	sbrs	r3, 4
 6fc:	0a c0       	rjmp	.+20     	; 0x712 <vfprintf+0x294>
 6fe:	29 2f       	mov	r18, r25
 700:	26 60       	ori	r18, 0x06	; 6
 702:	b2 2e       	mov	r11, r18
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0x294>
 706:	28 e0       	ldi	r18, 0x08	; 8
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	05 c0       	rjmp	.+10     	; 0x716 <vfprintf+0x298>
 70c:	20 e1       	ldi	r18, 0x10	; 16
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <vfprintf+0x298>
 712:	20 e1       	ldi	r18, 0x10	; 16
 714:	32 e0       	ldi	r19, 0x02	; 2
 716:	f8 01       	movw	r30, r16
 718:	b7 fe       	sbrs	r11, 7
 71a:	07 c0       	rjmp	.+14     	; 0x72a <vfprintf+0x2ac>
 71c:	60 81       	ld	r22, Z
 71e:	71 81       	ldd	r23, Z+1	; 0x01
 720:	82 81       	ldd	r24, Z+2	; 0x02
 722:	93 81       	ldd	r25, Z+3	; 0x03
 724:	0c 5f       	subi	r16, 0xFC	; 252
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	06 c0       	rjmp	.+12     	; 0x736 <vfprintf+0x2b8>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 5f       	subi	r16, 0xFE	; 254
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	a3 01       	movw	r20, r6
 738:	f1 d0       	rcall	.+482    	; 0x91c <__ultoa_invert>
 73a:	88 2e       	mov	r8, r24
 73c:	86 18       	sub	r8, r6
 73e:	fb 2d       	mov	r31, r11
 740:	ff 77       	andi	r31, 0x7F	; 127
 742:	3f 2e       	mov	r3, r31
 744:	36 fe       	sbrs	r3, 6
 746:	0d c0       	rjmp	.+26     	; 0x762 <vfprintf+0x2e4>
 748:	23 2d       	mov	r18, r3
 74a:	2e 7f       	andi	r18, 0xFE	; 254
 74c:	a2 2e       	mov	r10, r18
 74e:	89 14       	cp	r8, r9
 750:	58 f4       	brcc	.+22     	; 0x768 <vfprintf+0x2ea>
 752:	34 fe       	sbrs	r3, 4
 754:	0b c0       	rjmp	.+22     	; 0x76c <vfprintf+0x2ee>
 756:	32 fc       	sbrc	r3, 2
 758:	09 c0       	rjmp	.+18     	; 0x76c <vfprintf+0x2ee>
 75a:	83 2d       	mov	r24, r3
 75c:	8e 7e       	andi	r24, 0xEE	; 238
 75e:	a8 2e       	mov	r10, r24
 760:	05 c0       	rjmp	.+10     	; 0x76c <vfprintf+0x2ee>
 762:	b8 2c       	mov	r11, r8
 764:	a3 2c       	mov	r10, r3
 766:	03 c0       	rjmp	.+6      	; 0x76e <vfprintf+0x2f0>
 768:	b8 2c       	mov	r11, r8
 76a:	01 c0       	rjmp	.+2      	; 0x76e <vfprintf+0x2f0>
 76c:	b9 2c       	mov	r11, r9
 76e:	a4 fe       	sbrs	r10, 4
 770:	0f c0       	rjmp	.+30     	; 0x790 <vfprintf+0x312>
 772:	fe 01       	movw	r30, r28
 774:	e8 0d       	add	r30, r8
 776:	f1 1d       	adc	r31, r1
 778:	80 81       	ld	r24, Z
 77a:	80 33       	cpi	r24, 0x30	; 48
 77c:	21 f4       	brne	.+8      	; 0x786 <vfprintf+0x308>
 77e:	9a 2d       	mov	r25, r10
 780:	99 7e       	andi	r25, 0xE9	; 233
 782:	a9 2e       	mov	r10, r25
 784:	09 c0       	rjmp	.+18     	; 0x798 <vfprintf+0x31a>
 786:	a2 fe       	sbrs	r10, 2
 788:	06 c0       	rjmp	.+12     	; 0x796 <vfprintf+0x318>
 78a:	b3 94       	inc	r11
 78c:	b3 94       	inc	r11
 78e:	04 c0       	rjmp	.+8      	; 0x798 <vfprintf+0x31a>
 790:	8a 2d       	mov	r24, r10
 792:	86 78       	andi	r24, 0x86	; 134
 794:	09 f0       	breq	.+2      	; 0x798 <vfprintf+0x31a>
 796:	b3 94       	inc	r11
 798:	a3 fc       	sbrc	r10, 3
 79a:	10 c0       	rjmp	.+32     	; 0x7bc <vfprintf+0x33e>
 79c:	a0 fe       	sbrs	r10, 0
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <vfprintf+0x32e>
 7a0:	b2 14       	cp	r11, r2
 7a2:	80 f4       	brcc	.+32     	; 0x7c4 <vfprintf+0x346>
 7a4:	28 0c       	add	r2, r8
 7a6:	92 2c       	mov	r9, r2
 7a8:	9b 18       	sub	r9, r11
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <vfprintf+0x348>
 7ac:	b2 14       	cp	r11, r2
 7ae:	58 f4       	brcc	.+22     	; 0x7c6 <vfprintf+0x348>
 7b0:	b6 01       	movw	r22, r12
 7b2:	80 e2       	ldi	r24, 0x20	; 32
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	76 d0       	rcall	.+236    	; 0x8a4 <fputc>
 7b8:	b3 94       	inc	r11
 7ba:	f8 cf       	rjmp	.-16     	; 0x7ac <vfprintf+0x32e>
 7bc:	b2 14       	cp	r11, r2
 7be:	18 f4       	brcc	.+6      	; 0x7c6 <vfprintf+0x348>
 7c0:	2b 18       	sub	r2, r11
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0x34a>
 7c4:	98 2c       	mov	r9, r8
 7c6:	21 2c       	mov	r2, r1
 7c8:	a4 fe       	sbrs	r10, 4
 7ca:	0f c0       	rjmp	.+30     	; 0x7ea <vfprintf+0x36c>
 7cc:	b6 01       	movw	r22, r12
 7ce:	80 e3       	ldi	r24, 0x30	; 48
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	68 d0       	rcall	.+208    	; 0x8a4 <fputc>
 7d4:	a2 fe       	sbrs	r10, 2
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <vfprintf+0x386>
 7d8:	a1 fc       	sbrc	r10, 1
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <vfprintf+0x364>
 7dc:	88 e7       	ldi	r24, 0x78	; 120
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x368>
 7e2:	88 e5       	ldi	r24, 0x58	; 88
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	b6 01       	movw	r22, r12
 7e8:	0c c0       	rjmp	.+24     	; 0x802 <vfprintf+0x384>
 7ea:	8a 2d       	mov	r24, r10
 7ec:	86 78       	andi	r24, 0x86	; 134
 7ee:	51 f0       	breq	.+20     	; 0x804 <vfprintf+0x386>
 7f0:	a1 fe       	sbrs	r10, 1
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x37a>
 7f4:	8b e2       	ldi	r24, 0x2B	; 43
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <vfprintf+0x37c>
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	a7 fc       	sbrc	r10, 7
 7fc:	8d e2       	ldi	r24, 0x2D	; 45
 7fe:	b6 01       	movw	r22, r12
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	50 d0       	rcall	.+160    	; 0x8a4 <fputc>
 804:	89 14       	cp	r8, r9
 806:	30 f4       	brcc	.+12     	; 0x814 <vfprintf+0x396>
 808:	b6 01       	movw	r22, r12
 80a:	80 e3       	ldi	r24, 0x30	; 48
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	4a d0       	rcall	.+148    	; 0x8a4 <fputc>
 810:	9a 94       	dec	r9
 812:	f8 cf       	rjmp	.-16     	; 0x804 <vfprintf+0x386>
 814:	8a 94       	dec	r8
 816:	f3 01       	movw	r30, r6
 818:	e8 0d       	add	r30, r8
 81a:	f1 1d       	adc	r31, r1
 81c:	80 81       	ld	r24, Z
 81e:	b6 01       	movw	r22, r12
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	40 d0       	rcall	.+128    	; 0x8a4 <fputc>
 824:	81 10       	cpse	r8, r1
 826:	f6 cf       	rjmp	.-20     	; 0x814 <vfprintf+0x396>
 828:	22 20       	and	r2, r2
 82a:	09 f4       	brne	.+2      	; 0x82e <vfprintf+0x3b0>
 82c:	4e ce       	rjmp	.-868    	; 0x4ca <vfprintf+0x4c>
 82e:	b6 01       	movw	r22, r12
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	37 d0       	rcall	.+110    	; 0x8a4 <fputc>
 836:	2a 94       	dec	r2
 838:	f7 cf       	rjmp	.-18     	; 0x828 <vfprintf+0x3aa>
 83a:	f6 01       	movw	r30, r12
 83c:	86 81       	ldd	r24, Z+6	; 0x06
 83e:	97 81       	ldd	r25, Z+7	; 0x07
 840:	02 c0       	rjmp	.+4      	; 0x846 <vfprintf+0x3c8>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	2b 96       	adiw	r28, 0x0b	; 11
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	ff 90       	pop	r15
 85c:	ef 90       	pop	r14
 85e:	df 90       	pop	r13
 860:	cf 90       	pop	r12
 862:	bf 90       	pop	r11
 864:	af 90       	pop	r10
 866:	9f 90       	pop	r9
 868:	8f 90       	pop	r8
 86a:	7f 90       	pop	r7
 86c:	6f 90       	pop	r6
 86e:	5f 90       	pop	r5
 870:	4f 90       	pop	r4
 872:	3f 90       	pop	r3
 874:	2f 90       	pop	r2
 876:	08 95       	ret

00000878 <strnlen_P>:
 878:	fc 01       	movw	r30, r24
 87a:	05 90       	lpm	r0, Z+
 87c:	61 50       	subi	r22, 0x01	; 1
 87e:	70 40       	sbci	r23, 0x00	; 0
 880:	01 10       	cpse	r0, r1
 882:	d8 f7       	brcc	.-10     	; 0x87a <strnlen_P+0x2>
 884:	80 95       	com	r24
 886:	90 95       	com	r25
 888:	8e 0f       	add	r24, r30
 88a:	9f 1f       	adc	r25, r31
 88c:	08 95       	ret

0000088e <strnlen>:
 88e:	fc 01       	movw	r30, r24
 890:	61 50       	subi	r22, 0x01	; 1
 892:	70 40       	sbci	r23, 0x00	; 0
 894:	01 90       	ld	r0, Z+
 896:	01 10       	cpse	r0, r1
 898:	d8 f7       	brcc	.-10     	; 0x890 <strnlen+0x2>
 89a:	80 95       	com	r24
 89c:	90 95       	com	r25
 89e:	8e 0f       	add	r24, r30
 8a0:	9f 1f       	adc	r25, r31
 8a2:	08 95       	ret

000008a4 <fputc>:
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	fb 01       	movw	r30, r22
 8ae:	23 81       	ldd	r18, Z+3	; 0x03
 8b0:	21 fd       	sbrc	r18, 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <fputc+0x16>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	2c c0       	rjmp	.+88     	; 0x912 <fputc+0x6e>
 8ba:	22 ff       	sbrs	r18, 2
 8bc:	16 c0       	rjmp	.+44     	; 0x8ea <fputc+0x46>
 8be:	46 81       	ldd	r20, Z+6	; 0x06
 8c0:	57 81       	ldd	r21, Z+7	; 0x07
 8c2:	24 81       	ldd	r18, Z+4	; 0x04
 8c4:	35 81       	ldd	r19, Z+5	; 0x05
 8c6:	42 17       	cp	r20, r18
 8c8:	53 07       	cpc	r21, r19
 8ca:	44 f4       	brge	.+16     	; 0x8dc <fputc+0x38>
 8cc:	a0 81       	ld	r26, Z
 8ce:	b1 81       	ldd	r27, Z+1	; 0x01
 8d0:	9d 01       	movw	r18, r26
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	31 83       	std	Z+1, r19	; 0x01
 8d8:	20 83       	st	Z, r18
 8da:	8c 93       	st	X, r24
 8dc:	26 81       	ldd	r18, Z+6	; 0x06
 8de:	37 81       	ldd	r19, Z+7	; 0x07
 8e0:	2f 5f       	subi	r18, 0xFF	; 255
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	37 83       	std	Z+7, r19	; 0x07
 8e6:	26 83       	std	Z+6, r18	; 0x06
 8e8:	14 c0       	rjmp	.+40     	; 0x912 <fputc+0x6e>
 8ea:	8b 01       	movw	r16, r22
 8ec:	ec 01       	movw	r28, r24
 8ee:	fb 01       	movw	r30, r22
 8f0:	00 84       	ldd	r0, Z+8	; 0x08
 8f2:	f1 85       	ldd	r31, Z+9	; 0x09
 8f4:	e0 2d       	mov	r30, r0
 8f6:	09 95       	icall
 8f8:	89 2b       	or	r24, r25
 8fa:	e1 f6       	brne	.-72     	; 0x8b4 <fputc+0x10>
 8fc:	d8 01       	movw	r26, r16
 8fe:	16 96       	adiw	r26, 0x06	; 6
 900:	8d 91       	ld	r24, X+
 902:	9c 91       	ld	r25, X
 904:	17 97       	sbiw	r26, 0x07	; 7
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	17 96       	adiw	r26, 0x07	; 7
 90a:	9c 93       	st	X, r25
 90c:	8e 93       	st	-X, r24
 90e:	16 97       	sbiw	r26, 0x06	; 6
 910:	ce 01       	movw	r24, r28
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	08 95       	ret

0000091c <__ultoa_invert>:
 91c:	fa 01       	movw	r30, r20
 91e:	aa 27       	eor	r26, r26
 920:	28 30       	cpi	r18, 0x08	; 8
 922:	51 f1       	breq	.+84     	; 0x978 <__ultoa_invert+0x5c>
 924:	20 31       	cpi	r18, 0x10	; 16
 926:	81 f1       	breq	.+96     	; 0x988 <__ultoa_invert+0x6c>
 928:	e8 94       	clt
 92a:	6f 93       	push	r22
 92c:	6e 7f       	andi	r22, 0xFE	; 254
 92e:	6e 5f       	subi	r22, 0xFE	; 254
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	af 4f       	sbci	r26, 0xFF	; 255
 938:	b1 e0       	ldi	r27, 0x01	; 1
 93a:	3e d0       	rcall	.+124    	; 0x9b8 <__ultoa_invert+0x9c>
 93c:	b4 e0       	ldi	r27, 0x04	; 4
 93e:	3c d0       	rcall	.+120    	; 0x9b8 <__ultoa_invert+0x9c>
 940:	67 0f       	add	r22, r23
 942:	78 1f       	adc	r23, r24
 944:	89 1f       	adc	r24, r25
 946:	9a 1f       	adc	r25, r26
 948:	a1 1d       	adc	r26, r1
 94a:	68 0f       	add	r22, r24
 94c:	79 1f       	adc	r23, r25
 94e:	8a 1f       	adc	r24, r26
 950:	91 1d       	adc	r25, r1
 952:	a1 1d       	adc	r26, r1
 954:	6a 0f       	add	r22, r26
 956:	71 1d       	adc	r23, r1
 958:	81 1d       	adc	r24, r1
 95a:	91 1d       	adc	r25, r1
 95c:	a1 1d       	adc	r26, r1
 95e:	20 d0       	rcall	.+64     	; 0x9a0 <__ultoa_invert+0x84>
 960:	09 f4       	brne	.+2      	; 0x964 <__ultoa_invert+0x48>
 962:	68 94       	set
 964:	3f 91       	pop	r19
 966:	2a e0       	ldi	r18, 0x0A	; 10
 968:	26 9f       	mul	r18, r22
 96a:	11 24       	eor	r1, r1
 96c:	30 19       	sub	r19, r0
 96e:	30 5d       	subi	r19, 0xD0	; 208
 970:	31 93       	st	Z+, r19
 972:	de f6       	brtc	.-74     	; 0x92a <__ultoa_invert+0xe>
 974:	cf 01       	movw	r24, r30
 976:	08 95       	ret
 978:	46 2f       	mov	r20, r22
 97a:	47 70       	andi	r20, 0x07	; 7
 97c:	40 5d       	subi	r20, 0xD0	; 208
 97e:	41 93       	st	Z+, r20
 980:	b3 e0       	ldi	r27, 0x03	; 3
 982:	0f d0       	rcall	.+30     	; 0x9a2 <__ultoa_invert+0x86>
 984:	c9 f7       	brne	.-14     	; 0x978 <__ultoa_invert+0x5c>
 986:	f6 cf       	rjmp	.-20     	; 0x974 <__ultoa_invert+0x58>
 988:	46 2f       	mov	r20, r22
 98a:	4f 70       	andi	r20, 0x0F	; 15
 98c:	40 5d       	subi	r20, 0xD0	; 208
 98e:	4a 33       	cpi	r20, 0x3A	; 58
 990:	18 f0       	brcs	.+6      	; 0x998 <__ultoa_invert+0x7c>
 992:	49 5d       	subi	r20, 0xD9	; 217
 994:	31 fd       	sbrc	r19, 1
 996:	40 52       	subi	r20, 0x20	; 32
 998:	41 93       	st	Z+, r20
 99a:	02 d0       	rcall	.+4      	; 0x9a0 <__ultoa_invert+0x84>
 99c:	a9 f7       	brne	.-22     	; 0x988 <__ultoa_invert+0x6c>
 99e:	ea cf       	rjmp	.-44     	; 0x974 <__ultoa_invert+0x58>
 9a0:	b4 e0       	ldi	r27, 0x04	; 4
 9a2:	a6 95       	lsr	r26
 9a4:	97 95       	ror	r25
 9a6:	87 95       	ror	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	ba 95       	dec	r27
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__ultoa_invert+0x86>
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	61 05       	cpc	r22, r1
 9b4:	71 05       	cpc	r23, r1
 9b6:	08 95       	ret
 9b8:	9b 01       	movw	r18, r22
 9ba:	ac 01       	movw	r20, r24
 9bc:	0a 2e       	mov	r0, r26
 9be:	06 94       	lsr	r0
 9c0:	57 95       	ror	r21
 9c2:	47 95       	ror	r20
 9c4:	37 95       	ror	r19
 9c6:	27 95       	ror	r18
 9c8:	ba 95       	dec	r27
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__ultoa_invert+0xa2>
 9cc:	62 0f       	add	r22, r18
 9ce:	73 1f       	adc	r23, r19
 9d0:	84 1f       	adc	r24, r20
 9d2:	95 1f       	adc	r25, r21
 9d4:	a0 1d       	adc	r26, r0
 9d6:	08 95       	ret

000009d8 <_exit>:
 9d8:	f8 94       	cli

000009da <__stop_program>:
 9da:	ff cf       	rjmp	.-2      	; 0x9da <__stop_program>
