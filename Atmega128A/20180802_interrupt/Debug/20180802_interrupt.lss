
20180802_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a49  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  00001da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	32 d0       	rcall	.+100    	; 0x10e <main>
  aa:	57 c0       	rjmp	.+174    	; 0x15a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
char circular_shift_left(char pattern)
{
	char new_pattern_2 = (pattern >> 7) | (pattern << 1);
	
	return new_pattern_2;
}
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 78       	andi	r25, 0x80	; 128
  ca:	99 23       	and	r25, r25
  cc:	24 f4       	brge	.+8      	; 0xd6 <__vector_1+0x28>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	8e 6f       	ori	r24, 0xFE	; 254
  d2:	9f 6f       	ori	r25, 0xFF	; 255
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <INIT_PORT>:
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	11 ba       	out	0x11, r1	; 17
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	08 95       	ret

000000fa <INIT_INT0>:
  fa:	89 b7       	in	r24, 0x39	; 57
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	89 bf       	out	0x39, r24	; 57
 100:	ea e6       	ldi	r30, 0x6A	; 106
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <main>:


int main(void)
{
	
	INIT_PORT();
 10e:	ee df       	rcall	.-36     	; 0xec <INIT_PORT>
	INIT_INT0();
 110:	f4 df       	rcall	.-24     	; 0xfa <INIT_INT0>
 112:	8f ef       	ldi	r24, 0xFF	; 255
	
	char pattern = 0x01;
	
	DDRB = 0xFF;
 114:	87 bb       	out	0x17, r24	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
{
	
	INIT_PORT();
	INIT_INT0();
	
	char pattern = 0x01;
 118:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
	
	DDRB = 0xFF;
	
    while (1) 
    {
		if(state == 0)
 11c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 120:	23 2b       	or	r18, r19
 122:	69 f4       	brne	.+26     	; 0x13e <main+0x30>
 124:	88 bb       	out	0x18, r24	; 24
		{
			PORTB = pattern;
 126:	88 0f       	add	r24, r24
	return new_pattern_1;
}

char circular_shift_left(char pattern)
{
	char new_pattern_2 = (pattern >> 7) | (pattern << 1);
 128:	81 1d       	adc	r24, r1
 12a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	31 ee       	ldi	r19, 0xE1	; 225
 12e:	94 e0       	ldi	r25, 0x04	; 4
 130:	21 50       	subi	r18, 0x01	; 1
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x22>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x2c>
 13a:	00 00       	nop
 13c:	ed cf       	rjmp	.-38     	; 0x118 <main+0xa>
 13e:	88 bb       	out	0x18, r24	; 24
			pattern = circular_shift_left(pattern);
			_delay_ms(100);
		}
		else
		{
			PORTB = pattern;
 140:	80 fb       	bst	r24, 0
}


char circular_shift_right(char pattern)
{
	char new_pattern_1 = (pattern << 7) | (pattern >> 1);
 142:	87 95       	ror	r24
 144:	87 f9       	bld	r24, 7
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	31 ee       	ldi	r19, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	30 40       	sbci	r19, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x3e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x48>
 156:	00 00       	nop
 158:	df cf       	rjmp	.-66     	; 0x118 <main+0xa>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
