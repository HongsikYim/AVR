
20180821_practice_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000230  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a97  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086e  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000424  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000150  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b0 d0       	rcall	.+352    	; 0x224 <main>
  c4:	b3 c0       	rjmp	.+358    	; 0x22c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:
volatile int count = 0;
int state = 0;


ISR(TIMER0_COMP_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	count++;
  d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count>
  da:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <count+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <count+0x1>
  e4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count>
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
}
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <INIT_PORT>:

void INIT_PORT(void)
{
	DDRB = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0xFF;
 10e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 110:	12 ba       	out	0x12, r1	; 18
	
	DDRF &= ~0xFF;
 112:	e1 e6       	ldi	r30, 0x61	; 97
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	10 82       	st	Z, r1
	PORTF = 0xFF;
 11a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
	DDRE = 0xFF;
 11e:	82 b9       	out	0x02, r24	; 2
 120:	08 95       	ret

00000122 <INIT_INTERRUPT>:
}

void INIT_INTERRUPT(void)
{
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (0 << COM00) | (1 << WGM01) | (1 << CS02) | (0 << CS01) | (0 << CS00);
 122:	83 b7       	in	r24, 0x33	; 51
 124:	8c 66       	ori	r24, 0x6C	; 108
 126:	83 bf       	out	0x33, r24	; 51
	//TCCR2 |= (1 << WGM20) | (1 << COM21) | (0 << COM20) | (1 << WGM21) | (0 << CS22) | (1 << CS21) | (1 << CS00);
	TCCR3A |= (1 << COM3A1) | (0 << COM3A0) | (1 << WGM31) | (1 << WGM30);
 128:	eb e8       	ldi	r30, 0x8B	; 139
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	83 68       	ori	r24, 0x83	; 131
 130:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32) | (1 << CS31);
 132:	ea e8       	ldi	r30, 0x8A	; 138
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8a 61       	ori	r24, 0x1A	; 26
 13a:	80 83       	st	Z, r24
	
	OCR0 = 125;
 13c:	8d e7       	ldi	r24, 0x7D	; 125
 13e:	81 bf       	out	0x31, r24	; 49
	//OCR2 = 125;
	OCR3A = 0x7000;
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e7       	ldi	r25, 0x70	; 112
 144:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 148:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	//TIMSK |= (1 << OCIE0);
	//ETIMSK |= (1 << OCIE3A);
	
	sei();
 14c:	78 94       	sei
 14e:	08 95       	ret

00000150 <GET_BUTTON_STATE_0>:
}

uint8_t GET_BUTTON_STATE_0(void)
{
	static uint8_t state_previous = 1, state_current;
	state_current = (PINF & 0x01);
 150:	80 b1       	in	r24, 0x00	; 0
 152:	81 70       	andi	r24, 0x01	; 1
 154:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state_current.1750>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9c e9       	ldi	r25, 0x9C	; 156
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <GET_BUTTON_STATE_0+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <GET_BUTTON_STATE_0+0x12>
 162:	00 00       	nop
	_delay_ms(10);
	if( state_current != state_previous)
 164:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <state_current.1750>
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state_previous.1749>
 16c:	98 17       	cp	r25, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <GET_BUTTON_STATE_0+0x2e>
	{
		state_previous = state_current;
 170:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state_previous.1749>
		if(state_current == 0)
		{
			return 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	99 23       	and	r25, r25
 178:	19 f0       	breq	.+6      	; 0x180 <GET_BUTTON_STATE_0+0x30>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
		}
	}
	return 0;
 17e:	80 e0       	ldi	r24, 0x00	; 0
}
 180:	08 95       	ret

00000182 <GET_BUTTON_STATE_1>:
uint8_t GET_BUTTON_STATE_1(void)
{
	static uint8_t state_previous = 1, state_current;
	state_current = (PINF & 0x02) >> 1;
 182:	80 b1       	in	r24, 0x00	; 0
 184:	86 95       	lsr	r24
 186:	81 70       	andi	r24, 0x01	; 1
 188:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state_current.1755>
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <GET_BUTTON_STATE_1+0xe>
 194:	00 c0       	rjmp	.+0      	; 0x196 <GET_BUTTON_STATE_1+0x14>
 196:	00 00       	nop
	_delay_ms(10);
	if( state_current != state_previous)
 198:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state_current.1755>
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state_previous.1754>
 1a0:	98 17       	cp	r25, r24
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <GET_BUTTON_STATE_1+0x30>
	{
		state_previous = state_current;
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <state_previous.1754>
		if(state_current == 0)
		{
			return 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	99 23       	and	r25, r25
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <GET_BUTTON_STATE_1+0x32>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
		}
	}
	return 0;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
}
 1b4:	08 95       	ret

000001b6 <GET_BUTTON_STATE_2>:
uint8_t GET_BUTTON_STATE_2(void)
{
	static uint8_t state_previous = 1, state_current;
	state_current = (PINF & 0x04) >> 2;
 1b6:	80 b1       	in	r24, 0x00	; 0
 1b8:	82 fb       	bst	r24, 2
 1ba:	88 27       	eor	r24, r24
 1bc:	80 f9       	bld	r24, 0
 1be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <GET_BUTTON_STATE_2+0x10>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <GET_BUTTON_STATE_2+0x16>
 1cc:	00 00       	nop
	_delay_ms(10);
	if( state_current != state_previous)
 1ce:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d6:	98 17       	cp	r25, r24
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <GET_BUTTON_STATE_2+0x32>
	{
		state_previous = state_current;
 1da:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if(state_current == 0)
		{
			return 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	99 23       	and	r25, r25
 1e2:	19 f0       	breq	.+6      	; 0x1ea <GET_BUTTON_STATE_2+0x34>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
		}
	}
	return 0;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
}
 1ea:	08 95       	ret

000001ec <CONTROL_WITH_BUTTON>:

void CONTROL_WITH_BUTTON(void)
{
	if(GET_BUTTON_STATE_0())
 1ec:	b1 df       	rcall	.-158    	; 0x150 <GET_BUTTON_STATE_0>
 1ee:	88 23       	and	r24, r24
 1f0:	29 f0       	breq	.+10     	; 0x1fc <CONTROL_WITH_BUTTON+0x10>
	{
		OCR0 = 0;
 1f2:	11 be       	out	0x31, r1	; 49
		//OCR2 = 0;
		OCR3A = 0;
 1f4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1f8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	}
	
	if(GET_BUTTON_STATE_1())
 1fc:	c2 df       	rcall	.-124    	; 0x182 <GET_BUTTON_STATE_1>
 1fe:	88 23       	and	r24, r24
 200:	39 f0       	breq	.+14     	; 0x210 <CONTROL_WITH_BUTTON+0x24>
	{
		OCR0 = 0;
 202:	11 be       	out	0x31, r1	; 49
		//OCR2 = 125;
		OCR3A = 0x7000;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e7       	ldi	r25, 0x70	; 112
 208:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 20c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	}
	
	if(GET_BUTTON_STATE_2())
 210:	d2 df       	rcall	.-92     	; 0x1b6 <GET_BUTTON_STATE_2>
 212:	88 23       	and	r24, r24
 214:	31 f0       	breq	.+12     	; 0x222 <CONTROL_WITH_BUTTON+0x36>
	{
		OCR0 = 125;
 216:	8d e7       	ldi	r24, 0x7D	; 125
 218:	81 bf       	out	0x31, r24	; 49
		//OCR2 = 0;
		OCR3A = 0;
 21a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 21e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 222:	08 95       	ret

00000224 <main>:
	}
}

int main(void)
{
	INIT_PORT();
 224:	72 df       	rcall	.-284    	; 0x10a <INIT_PORT>
	INIT_INTERRUPT();
 226:	7d df       	rcall	.-262    	; 0x122 <INIT_INTERRUPT>
	
		
    /* Replace with your application code */
    while (1) 
    {
		CONTROL_WITH_BUTTON();
 228:	e1 df       	rcall	.-62     	; 0x1ec <CONTROL_WITH_BUTTON>
 22a:	fe cf       	rjmp	.-4      	; 0x228 <main+0x4>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
