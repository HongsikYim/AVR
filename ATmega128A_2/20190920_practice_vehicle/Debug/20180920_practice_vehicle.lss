
20180920_practice_vehicle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001e8  008001e8  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f94  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac5  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d1  00000000  00000000  00002019  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000389  00000000  00000000  00002f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000032da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 3e       	cpi	r26, 0xE8	; 232
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 ee       	ldi	r26, 0xE8	; 232
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 3e       	cpi	r26, 0xEE	; 238
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d0       	rcall	.+48     	; 0xf4 <main>
  c4:	1d c1       	rjmp	.+570    	; 0x300 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <MODE>:
	UART0_print_string("5. Left\r\n");
	UART0_print_string("> ");
}

void BLUETOOTH_conection(void)
{
  c8:	84 eb       	ldi	r24, 0xB4	; 180
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	06 d1       	rcall	.+524    	; 0x2da <UART0_print_string>
  ce:	8c e1       	ldi	r24, 0x1C	; 28
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	03 d1       	rcall	.+518    	; 0x2da <UART0_print_string>
  d4:	86 e2       	ldi	r24, 0x26	; 38
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	00 d1       	rcall	.+512    	; 0x2da <UART0_print_string>
  da:	86 e3       	ldi	r24, 0x36	; 54
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	fd d0       	rcall	.+506    	; 0x2da <UART0_print_string>
  e0:	87 e4       	ldi	r24, 0x47	; 71
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	fa d0       	rcall	.+500    	; 0x2da <UART0_print_string>
  e6:	82 e5       	ldi	r24, 0x52	; 82
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	f7 d0       	rcall	.+494    	; 0x2da <UART0_print_string>
  ec:	8c e5       	ldi	r24, 0x5C	; 92
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	f4 c0       	rjmp	.+488    	; 0x2da <UART0_print_string>
  f2:	08 95       	ret

000000f4 <main>:

int main(void)
{
	uint8_t select_mode=0, states=0;
	
	stdout = &OUTPUT;
  f4:	e8 ee       	ldi	r30, 0xE8	; 232
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	93 83       	std	Z+3, r25	; 0x03
  fe:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
	
	UART0_init();   //보레이트 9600
 108:	d3 d0       	rcall	.+422    	; 0x2b0 <UART0_init>
	INIT_PORT_4_MOTOR();
 10a:	62 d0       	rcall	.+196    	; 0x1d0 <INIT_PORT_4_MOTOR>
	INIT_INTERRUPT_4_MOTOR();
 10c:	68 d0       	rcall	.+208    	; 0x1de <INIT_INTERRUPT_4_MOTOR>
 10e:	dc df       	rcall	.-72     	; 0xc8 <MODE>
	//I2C_LCD_init();
	//ledinit();
	
	//I2C_LCD_write_string_XY(0, 0, "hello world!");
	
	MODE();
 110:	c1 e0       	ldi	r28, 0x01	; 1
 112:	0f 2e       	mov	r0, r31
	states = STATE_STOP;
 114:	f3 e0       	ldi	r31, 0x03	; 3
				states = STATE_GO_FORWARD;
				UART0_print_string("Selected 2. STATE_GO_FORWARD\r\n");
				break;
				
				case '3':
				states = STATE_GO_BACKWARD;
 116:	af 2e       	mov	r10, r31
 118:	f0 2d       	mov	r31, r0
 11a:	68 94       	set
 11c:	bb 24       	eor	r11, r11
				UART0_print_string("Selected 3. STATE_GO_BACKWARD\r\n");
				break;
				
				case '4':
				states = TURN_RIGHT;
 11e:	b2 f8       	bld	r11, 2
 120:	0f 2e       	mov	r0, r31
 122:	f5 e0       	ldi	r31, 0x05	; 5
				UART0_print_string("Selected 4. TURN_RIGHT\r\n");
				break;
				
				case '5':
				states = TURN_LEFT;
 124:	cf 2e       	mov	r12, r31
 126:	f0 2d       	mov	r31, r0
 128:	dd 24       	eor	r13, r13
 12a:	d3 94       	inc	r13
			select_mode = UART0_receive();
			switch(select_mode)
			{
				//메뉴에서 state 입력
				case '1':
				states = STATE_STOP;
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	0f 2e       	mov	r0, r31
				UART0_print_string("Selected 1. STATE_STOP\r\n");
				break;
				
				case '2':
				states = STATE_GO_FORWARD;
 130:	f6 e8       	ldi	r31, 0x86	; 134
		{
			//선택한 모드 실행
			case STATE_STOP:
			OCR1A = 0;
			OCR1B = 0;
			OCR3A = 0;
 132:	ef 2e       	mov	r14, r31
 134:	f1 2c       	mov	r15, r1
 136:	f0 2d       	mov	r31, r0
 138:	04 e8       	ldi	r16, 0x84	; 132
			OCR3B = 0;
 13a:	10 e0       	ldi	r17, 0x00	; 0
	MODE();
	states = STATE_STOP;
	
	while (1)
	{
		if (UART0_rx_check())
 13c:	dc d0       	rcall	.+440    	; 0x2f6 <UART0_rx_check>
 13e:	88 23       	and	r24, r24
 140:	39 f1       	breq	.+78     	; 0x190 <main+0x9c>
 142:	c7 d0       	rcall	.+398    	; 0x2d2 <UART0_receive>
		{
			select_mode = UART0_receive();
 144:	83 33       	cpi	r24, 0x33	; 51
 146:	a9 f0       	breq	.+42     	; 0x172 <main+0x7e>
			switch(select_mode)
 148:	28 f4       	brcc	.+10     	; 0x154 <main+0x60>
 14a:	81 33       	cpi	r24, 0x31	; 49
 14c:	41 f0       	breq	.+16     	; 0x15e <main+0x6a>
 14e:	82 33       	cpi	r24, 0x32	; 50
 150:	59 f0       	breq	.+22     	; 0x168 <main+0x74>
 152:	1d c0       	rjmp	.+58     	; 0x18e <main+0x9a>
 154:	84 33       	cpi	r24, 0x34	; 52
 156:	91 f0       	breq	.+36     	; 0x17c <main+0x88>
 158:	85 33       	cpi	r24, 0x35	; 53
 15a:	a9 f0       	breq	.+42     	; 0x186 <main+0x92>
 15c:	18 c0       	rjmp	.+48     	; 0x18e <main+0x9a>
 15e:	8f e5       	ldi	r24, 0x5F	; 95
			{
				//메뉴에서 state 입력
				case '1':
				states = STATE_STOP;
				UART0_print_string("Selected 1. STATE_STOP\r\n");
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	bb d0       	rcall	.+374    	; 0x2da <UART0_print_string>
 164:	cd 2d       	mov	r28, r13
			select_mode = UART0_receive();
			switch(select_mode)
			{
				//메뉴에서 state 입력
				case '1':
				states = STATE_STOP;
 166:	13 c0       	rjmp	.+38     	; 0x18e <main+0x9a>
				UART0_print_string("Selected 1. STATE_STOP\r\n");
				break;
 168:	88 e7       	ldi	r24, 0x78	; 120
				
				case '2':
				states = STATE_GO_FORWARD;
				UART0_print_string("Selected 2. STATE_GO_FORWARD\r\n");
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	b6 d0       	rcall	.+364    	; 0x2da <UART0_print_string>
 16e:	cd 2f       	mov	r28, r29
				states = STATE_STOP;
				UART0_print_string("Selected 1. STATE_STOP\r\n");
				break;
				
				case '2':
				states = STATE_GO_FORWARD;
 170:	0e c0       	rjmp	.+28     	; 0x18e <main+0x9a>
				UART0_print_string("Selected 2. STATE_GO_FORWARD\r\n");
				break;
				
				case '3':
				states = STATE_GO_BACKWARD;
				UART0_print_string("Selected 3. STATE_GO_BACKWARD\r\n");
 172:	87 e9       	ldi	r24, 0x97	; 151
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	b1 d0       	rcall	.+354    	; 0x2da <UART0_print_string>
 178:	ca 2d       	mov	r28, r10
				break;
 17a:	09 c0       	rjmp	.+18     	; 0x18e <main+0x9a>
				
				case '4':
				states = TURN_RIGHT;
				UART0_print_string("Selected 4. TURN_RIGHT\r\n");
 17c:	87 eb       	ldi	r24, 0xB7	; 183
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	ac d0       	rcall	.+344    	; 0x2da <UART0_print_string>
				states = STATE_GO_BACKWARD;
				UART0_print_string("Selected 3. STATE_GO_BACKWARD\r\n");
				break;
				
				case '4':
				states = TURN_RIGHT;
 182:	cb 2d       	mov	r28, r11
				UART0_print_string("Selected 4. TURN_RIGHT\r\n");
				break;
 184:	04 c0       	rjmp	.+8      	; 0x18e <main+0x9a>
				
				case '5':
				states = TURN_LEFT;
				UART0_print_string("Selected 5. TURN LEFT\r\n");
 186:	80 ed       	ldi	r24, 0xD0	; 208
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	a7 d0       	rcall	.+334    	; 0x2da <UART0_print_string>
 18c:	cc 2d       	mov	r28, r12
				states = TURN_RIGHT;
				UART0_print_string("Selected 4. TURN_RIGHT\r\n");
				break;
				
				case '5':
				states = TURN_LEFT;
 18e:	9c df       	rcall	.-200    	; 0xc8 <MODE>
				break;
				
				default:
				break;
			}
			MODE();
 190:	c3 30       	cpi	r28, 0x03	; 3
 192:	c1 f0       	breq	.+48     	; 0x1c4 <main+0xd0>
		}

		switch(states)
 194:	28 f4       	brcc	.+10     	; 0x1a0 <main+0xac>
 196:	c1 30       	cpi	r28, 0x01	; 1
 198:	41 f0       	breq	.+16     	; 0x1aa <main+0xb6>
 19a:	c2 30       	cpi	r28, 0x02	; 2
 19c:	89 f0       	breq	.+34     	; 0x1c0 <main+0xcc>
 19e:	ce cf       	rjmp	.-100    	; 0x13c <main+0x48>
 1a0:	c4 30       	cpi	r28, 0x04	; 4
 1a2:	91 f0       	breq	.+36     	; 0x1c8 <main+0xd4>
 1a4:	c5 30       	cpi	r28, 0x05	; 5
 1a6:	91 f0       	breq	.+36     	; 0x1cc <main+0xd8>
 1a8:	c9 cf       	rjmp	.-110    	; 0x13c <main+0x48>
 1aa:	1b bc       	out	0x2b, r1	; 43
		{
			//선택한 모드 실행
			case STATE_STOP:
			OCR1A = 0;
 1ac:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 0;
 1ae:	19 bc       	out	0x29, r1	; 41
			OCR3A = 0;
 1b0:	18 bc       	out	0x28, r1	; 40
 1b2:	f7 01       	movw	r30, r14
			OCR3B = 0;
 1b4:	11 82       	std	Z+1, r1	; 0x01
 1b6:	10 82       	st	Z, r1
 1b8:	f8 01       	movw	r30, r16
			break;
 1ba:	11 82       	std	Z+1, r1	; 0x01
			
			case STATE_GO_FORWARD:
			MOTOR_RUN_FORWARD();
 1bc:	10 82       	st	Z, r1
 1be:	be cf       	rjmp	.-132    	; 0x13c <main+0x48>
			break;
 1c0:	37 d0       	rcall	.+110    	; 0x230 <MOTOR_RUN_FORWARD>
			
			case STATE_GO_BACKWARD:
			MOTOR_RUN_BACKWARD();
 1c2:	bc cf       	rjmp	.-136    	; 0x13c <main+0x48>
 1c4:	44 d0       	rcall	.+136    	; 0x24e <MOTOR_RUN_BACKWARD>
			break;
 1c6:	ba cf       	rjmp	.-140    	; 0x13c <main+0x48>
			
			case TURN_RIGHT:
			MOTOR_RUN_RIGHT();
 1c8:	51 d0       	rcall	.+162    	; 0x26c <MOTOR_RUN_RIGHT>
 1ca:	b8 cf       	rjmp	.-144    	; 0x13c <main+0x48>
			break;
 1cc:	60 d0       	rcall	.+192    	; 0x28e <MOTOR_RUN_LEFT>
			
			case TURN_LEFT:
			MOTOR_RUN_LEFT();
 1ce:	b6 cf       	rjmp	.-148    	; 0x13c <main+0x48>

000001d0 <INIT_PORT_4_MOTOR>:
#define SpeedMotorL1(sL1)		OCR3A = sL1
#define SpeedMotorL2(sL2)		OCR3B = sL2

void INIT_PORT_4_MOTOR(void)
{
	DDRB |= (1 << PB5) | (1 << PB6);
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	80 66       	ori	r24, 0x60	; 96
 1d4:	87 bb       	out	0x17, r24	; 23
	DDRE |= (1 << PE3) | (1 << PE4);
 1d6:	82 b1       	in	r24, 0x02	; 2
 1d8:	88 61       	ori	r24, 0x18	; 24
 1da:	82 b9       	out	0x02, r24	; 2
 1dc:	08 95       	ret

000001de <INIT_INTERRUPT_4_MOTOR>:
}

void INIT_INTERRUPT_4_MOTOR(void)
{
	TCCR1A |= (1 << WGM10) | (0 << WGM11);
 1de:	8f b5       	in	r24, 0x2f	; 47
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (0 << WGM13);
 1e4:	8e b5       	in	r24, 0x2e	; 46
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1 << COM1B1) | (1 << COM1A1);
 1ea:	8f b5       	in	r24, 0x2f	; 47
 1ec:	80 6a       	ori	r24, 0xA0	; 160
 1ee:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << CS12) | (1 << CS11) | (1 << CS10);
 1f0:	8e b5       	in	r24, 0x2e	; 46
 1f2:	83 60       	ori	r24, 0x03	; 3
 1f4:	8e bd       	out	0x2e, r24	; 46
	
	//분주비 64, 고속 PWM
	TCCR3A |= (1 << WGM30) | (0 << WGM31);
 1f6:	ab e8       	ldi	r26, 0x8B	; 139
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	8c 91       	ld	r24, X
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33);
 200:	ea e8       	ldi	r30, 0x8A	; 138
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3B1) | (1 << COM3A1);
 20a:	8c 91       	ld	r24, X
 20c:	80 6a       	ori	r24, 0xA0	; 160
 20e:	8c 93       	st	X, r24
	TCCR3B |= (0 << CS32) | (1 << CS31) | (1 << CS30);
 210:	80 81       	ld	r24, Z
 212:	83 60       	ori	r24, 0x03	; 3
 214:	80 83       	st	Z, r24
	
	OCR1A = 0;
 216:	1b bc       	out	0x2b, r1	; 43
 218:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
 21a:	19 bc       	out	0x29, r1	; 41
 21c:	18 bc       	out	0x28, r1	; 40
	OCR3A = 0;
 21e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 222:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 0;
 226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 22a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 22e:	08 95       	ret

00000230 <MOTOR_RUN_FORWARD>:

}

void MOTOR_RUN_FORWARD(void)
{
	OCR1A = 200;
 230:	88 ec       	ldi	r24, 0xC8	; 200
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	9b bd       	out	0x2b, r25	; 43
 236:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;
 238:	19 bc       	out	0x29, r1	; 41
 23a:	18 bc       	out	0x28, r1	; 40
	OCR3A = 200;
 23c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 240:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 0;
 244:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 248:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 24c:	08 95       	ret

0000024e <MOTOR_RUN_BACKWARD>:
}

void MOTOR_RUN_BACKWARD(void)
{
	OCR1A = 0;
 24e:	1b bc       	out	0x2b, r1	; 43
 250:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 200;
 252:	88 ec       	ldi	r24, 0xC8	; 200
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	99 bd       	out	0x29, r25	; 41
 258:	88 bd       	out	0x28, r24	; 40
	OCR3A = 0;
 25a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 25e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 200;
 262:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 266:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 26a:	08 95       	ret

0000026c <MOTOR_RUN_RIGHT>:
}

void MOTOR_RUN_RIGHT(void)
{
	OCR1A = 200;
 26c:	88 ec       	ldi	r24, 0xC8	; 200
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9b bd       	out	0x2b, r25	; 43
 272:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;
 274:	19 bc       	out	0x29, r1	; 41
 276:	18 bc       	out	0x28, r1	; 40
	OCR3A = 40;
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 280:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 0;
 284:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 288:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 28c:	08 95       	ret

0000028e <MOTOR_RUN_LEFT>:
}

void MOTOR_RUN_LEFT(void)
{
	OCR1A = 40;
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9b bd       	out	0x2b, r25	; 43
 294:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;
 296:	19 bc       	out	0x29, r1	; 41
 298:	18 bc       	out	0x28, r1	; 40
	OCR3A = 200;
 29a:	88 ec       	ldi	r24, 0xC8	; 200
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 0;
 2a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2ae:	08 95       	ret

000002b0 <UART0_init>:
	}
	for(i = index; i >= 0; i--)
	{
		UART0_transmit(numString[i]);
	}
}
 2b0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 2b4:	8f ec       	ldi	r24, 0xCF	; 207
 2b6:	89 b9       	out	0x09, r24	; 9
 2b8:	59 9a       	sbi	0x0b, 1	; 11
 2ba:	e5 e9       	ldi	r30, 0x95	; 149
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	86 60       	ori	r24, 0x06	; 6
 2c2:	80 83       	st	Z, r24
 2c4:	54 9a       	sbi	0x0a, 4	; 10
 2c6:	53 9a       	sbi	0x0a, 3	; 10
 2c8:	08 95       	ret

000002ca <UART0_transmit>:
 2ca:	5d 9b       	sbis	0x0b, 5	; 11
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <UART0_transmit>
 2ce:	8c b9       	out	0x0c, r24	; 12
 2d0:	08 95       	ret

000002d2 <UART0_receive>:
 2d2:	5f 9b       	sbis	0x0b, 7	; 11
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <UART0_receive>
 2d6:	8c b1       	in	r24, 0x0c	; 12
 2d8:	08 95       	ret

000002da <UART0_print_string>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	88 81       	ld	r24, Y
 2e2:	88 23       	and	r24, r24
 2e4:	29 f0       	breq	.+10     	; 0x2f0 <UART0_print_string+0x16>
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	f0 df       	rcall	.-32     	; 0x2ca <UART0_transmit>
 2ea:	89 91       	ld	r24, Y+
 2ec:	81 11       	cpse	r24, r1
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <UART0_print_string+0xe>
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <UART0_rx_check>:

uint8_t UART0_rx_check(void)
{
	if( UCSR0A & (1<<RXC0) )	// 데이터 수신 대기
 2f6:	8b b1       	in	r24, 0x0b	; 11
	return 1;
	else
	return 0;
 2f8:	88 1f       	adc	r24, r24
 2fa:	88 27       	eor	r24, r24
 2fc:	88 1f       	adc	r24, r24
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
