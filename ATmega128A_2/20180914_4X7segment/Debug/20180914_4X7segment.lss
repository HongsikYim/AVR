
20180914_4X7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b92  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096a  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025c  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	12 d1       	rcall	.+548    	; 0x2e8 <main>
  c4:	3f c1       	rjmp	.+638    	; 0x344 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_init>:
 */ 
#include "FND.h"

void FND_init(void)
{
	FND_DATA_DDR = 0xff;   // FND Data Port
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	FND_CONTROL_DDR |= 0xf0;   // FND Control Port
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6f       	ori	r24, 0xF0	; 240
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	08 95       	ret

000000d4 <displayFND>:
}

void displayFND(uint8_t position, uint8_t number)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	2e 97       	sbiw	r28, 0x0e	; 14
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
	// 0   1     2     3     4     5     6     7     8     9
	uint8_t num[] =	{0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67};
  e8:	9a e0       	ldi	r25, 0x0A	; 10
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	de 01       	movw	r26, r28
  f0:	11 96       	adiw	r26, 0x01	; 1
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	9a 95       	dec	r25
  f8:	e1 f7       	brne	.-8      	; 0xf2 <displayFND+0x1e>
	// FND 위치  1000,  100,   10,    1
	uint8_t fndselect[] = {0x80, 0x40, 0x20, 0x10};
  fa:	90 e8       	ldi	r25, 0x80	; 128
  fc:	9b 87       	std	Y+11, r25	; 0x0b
  fe:	90 e4       	ldi	r25, 0x40	; 64
 100:	9c 87       	std	Y+12, r25	; 0x0c
 102:	90 e2       	ldi	r25, 0x20	; 32
 104:	9d 87       	std	Y+13, r25	; 0x0d
 106:	90 e1       	ldi	r25, 0x10	; 16
 108:	9e 87       	std	Y+14, r25	; 0x0e
	
	FND_CONTROL_PORT = FND_CONTROL_PORT|0xf0;
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	90 6f       	ori	r25, 0xF0	; 240
 10e:	98 bb       	out	0x18, r25	; 24
	FND_CONTROL_PORT &= ~fndselect[position];
 110:	98 b3       	in	r25, 0x18	; 24
 112:	fe 01       	movw	r30, r28
 114:	e8 0f       	add	r30, r24
 116:	f1 1d       	adc	r31, r1
 118:	83 85       	ldd	r24, Z+11	; 0x0b
 11a:	80 95       	com	r24
 11c:	98 23       	and	r25, r24
 11e:	98 bb       	out	0x18, r25	; 24
	FND_DATA_PORT = num[number];
 120:	e1 e0       	ldi	r30, 0x01	; 1
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ec 0f       	add	r30, r28
 126:	fd 1f       	adc	r31, r29
 128:	e6 0f       	add	r30, r22
 12a:	f1 1d       	adc	r31, r1
 12c:	80 81       	ld	r24, Z
 12e:	85 bb       	out	0x15, r24	; 21
}
 130:	2e 96       	adiw	r28, 0x0e	; 14
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <__vector_16>:

volatile uint8_t timercounter0 = 0;
volatile unsigned int FndValue = 0;

ISR(TIMER0_OVF_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	0b b6       	in	r0, 0x3b	; 59
 14e:	0f 92       	push	r0
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	if(timercounter0%4 == 0)
 168:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timercounter0>
 16c:	83 70       	andi	r24, 0x03	; 3
 16e:	f9 f4       	brne	.+62     	; 0x1ae <__vector_16+0x6c>
	displayFND(0, FndValue%10);  // 1의 자리
 170:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 174:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x1>
 178:	9a 01       	movw	r18, r20
 17a:	ad ec       	ldi	r26, 0xCD	; 205
 17c:	bc ec       	ldi	r27, 0xCC	; 204
 17e:	d3 d0       	rcall	.+422    	; 0x326 <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	9c 01       	movw	r18, r24
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	82 0f       	add	r24, r18
 1a0:	93 1f       	adc	r25, r19
 1a2:	ba 01       	movw	r22, r20
 1a4:	68 1b       	sub	r22, r24
 1a6:	79 0b       	sbc	r23, r25
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	94 df       	rcall	.-216    	; 0xd4 <displayFND>
 1ac:	78 c0       	rjmp	.+240    	; 0x29e <__vector_16+0x15c>
	else if(timercounter0%4 == 1)
 1ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timercounter0>
 1b2:	83 70       	andi	r24, 0x03	; 3
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	29 f5       	brne	.+74     	; 0x202 <__vector_16+0xc0>
	displayFND(1, FndValue%100/10);  // 10의 자리
 1b8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 1bc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x1>
 1c0:	9a 01       	movw	r18, r20
 1c2:	36 95       	lsr	r19
 1c4:	27 95       	ror	r18
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	ab e7       	ldi	r26, 0x7B	; 123
 1cc:	b4 e1       	ldi	r27, 0x14	; 20
 1ce:	ab d0       	rcall	.+342    	; 0x326 <__umulhisi3>
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	64 e6       	ldi	r22, 0x64	; 100
 1d6:	68 9f       	mul	r22, r24
 1d8:	90 01       	movw	r18, r0
 1da:	69 9f       	mul	r22, r25
 1dc:	30 0d       	add	r19, r0
 1de:	11 24       	eor	r1, r1
 1e0:	ca 01       	movw	r24, r20
 1e2:	82 1b       	sub	r24, r18
 1e4:	93 0b       	sbc	r25, r19
 1e6:	9c 01       	movw	r18, r24
 1e8:	ad ec       	ldi	r26, 0xCD	; 205
 1ea:	bc ec       	ldi	r27, 0xCC	; 204
 1ec:	9c d0       	rcall	.+312    	; 0x326 <__umulhisi3>
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	68 2f       	mov	r22, r24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	6a df       	rcall	.-300    	; 0xd4 <displayFND>
 200:	4e c0       	rjmp	.+156    	; 0x29e <__vector_16+0x15c>
	else if(timercounter0%4 == 2)
 202:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timercounter0>
 206:	83 70       	andi	r24, 0x03	; 3
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	71 f5       	brne	.+92     	; 0x268 <__vector_16+0x126>
	displayFND(2, FndValue%1000/100);  // 100의 자리
 20c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 210:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x1>
 214:	9a 01       	movw	r18, r20
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	a5 ec       	ldi	r26, 0xC5	; 197
 224:	b0 e2       	ldi	r27, 0x20	; 32
 226:	7f d0       	rcall	.+254    	; 0x326 <__umulhisi3>
 228:	92 95       	swap	r25
 22a:	82 95       	swap	r24
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	89 27       	eor	r24, r25
 230:	9f 70       	andi	r25, 0x0F	; 15
 232:	89 27       	eor	r24, r25
 234:	68 ee       	ldi	r22, 0xE8	; 232
 236:	73 e0       	ldi	r23, 0x03	; 3
 238:	86 9f       	mul	r24, r22
 23a:	90 01       	movw	r18, r0
 23c:	87 9f       	mul	r24, r23
 23e:	30 0d       	add	r19, r0
 240:	96 9f       	mul	r25, r22
 242:	30 0d       	add	r19, r0
 244:	11 24       	eor	r1, r1
 246:	ca 01       	movw	r24, r20
 248:	82 1b       	sub	r24, r18
 24a:	93 0b       	sbc	r25, r19
 24c:	9c 01       	movw	r18, r24
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	36 95       	lsr	r19
 254:	27 95       	ror	r18
 256:	ab e7       	ldi	r26, 0x7B	; 123
 258:	b4 e1       	ldi	r27, 0x14	; 20
 25a:	65 d0       	rcall	.+202    	; 0x326 <__umulhisi3>
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	68 2f       	mov	r22, r24
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	37 df       	rcall	.-402    	; 0xd4 <displayFND>
 266:	1b c0       	rjmp	.+54     	; 0x29e <__vector_16+0x15c>
	else if(timercounter0%4 == 3)
 268:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timercounter0>
 26c:	83 70       	andi	r24, 0x03	; 3
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	b1 f4       	brne	.+44     	; 0x29e <__vector_16+0x15c>
	displayFND(3, FndValue/1000);  // 1000의 자리
 272:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 276:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	a5 ec       	ldi	r26, 0xC5	; 197
 288:	b0 e2       	ldi	r27, 0x20	; 32
 28a:	4d d0       	rcall	.+154    	; 0x326 <__umulhisi3>
 28c:	92 95       	swap	r25
 28e:	82 95       	swap	r24
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	89 27       	eor	r24, r25
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 27       	eor	r24, r25
 298:	68 2f       	mov	r22, r24
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	1b df       	rcall	.-458    	; 0xd4 <displayFND>
	
	timercounter0++;
 29e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timercounter0>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timercounter0>
	if (timercounter0 >= 200)
 2a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timercounter0>
 2ac:	88 3c       	cpi	r24, 0xC8	; 200
 2ae:	10 f0       	brcs	.+4      	; 0x2b4 <__vector_16+0x172>
	{
		timercounter0 = 0;
 2b0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timercounter0>
	}
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <TimerInterruptInit>:
	}
}

void TimerInterruptInit(void)
{
	TCCR0 |= (1<<CS02) | (0<<CS01) | (0<<CS00);
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 2e0:	87 b7       	in	r24, 0x37	; 55
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	87 bf       	out	0x37, r24	; 55
 2e6:	08 95       	ret

000002e8 <main>:
	}
}

int main(void)
{
	FND_init();
 2e8:	ef de       	rcall	.-546    	; 0xc8 <FND_init>
	TimerInterruptInit();
 2ea:	f7 df       	rcall	.-18     	; 0x2da <TimerInterruptInit>
 2ec:	78 94       	sei
	sei();
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	94 e0       	ldi	r25, 0x04	; 4
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0xc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x16>
 2fe:	00 00       	nop
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	81 ee       	ldi	r24, 0xE1	; 225
 304:	94 e0       	ldi	r25, 0x04	; 4
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x28>
 310:	00 00       	nop
 312:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	
	while (1)
	{
		_delay_ms(100);
		_delay_ms(100);
		FndValue++;
 316:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 320:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 324:	e4 cf       	rjmp	.-56     	; 0x2ee <main+0x6>

00000326 <__umulhisi3>:
 326:	a2 9f       	mul	r26, r18
 328:	b0 01       	movw	r22, r0
 32a:	b3 9f       	mul	r27, r19
 32c:	c0 01       	movw	r24, r0
 32e:	a3 9f       	mul	r26, r19
 330:	70 0d       	add	r23, r0
 332:	81 1d       	adc	r24, r1
 334:	11 24       	eor	r1, r1
 336:	91 1d       	adc	r25, r1
 338:	b2 9f       	mul	r27, r18
 33a:	70 0d       	add	r23, r0
 33c:	81 1d       	adc	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	91 1d       	adc	r25, r1
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
