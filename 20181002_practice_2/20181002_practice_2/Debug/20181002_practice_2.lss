
20181002_practice_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b84  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000447  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f9  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000024db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	d4 c0       	rjmp	.+424    	; 0x26e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART0_receive, _FDEV_SETUP_READ);

int main(void)
{
	UART0_init();
  c8:	27 d0       	rcall	.+78     	; 0x118 <UART0_init>
	
	DDRG = 0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG = 0xFF;
  d0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	stdout = &OUTPUT;
  d4:	ec e1       	ldi	r30, 0x1C	; 28
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	93 83       	std	Z+3, r25	; 0x03
  de:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
			data = UART0_receive();
			printf("%c", data);
			//if(strcmp(message, "1") == 0)
			if(data == '1')
			{
				PORTG = 0xFF;
  e8:	05 e6       	ldi	r16, 0x65	; 101
  ea:	10 e0       	ldi	r17, 0x00	; 0
	char data;
    /* Replace with your application code */
    while (1) 
    {
		//scanf("%s", message);
		if( UART0_rx_check())
  ec:	df ef       	ldi	r29, 0xFF	; 255
  ee:	79 d0       	rcall	.+242    	; 0x1e2 <UART0_rx_check>
  f0:	88 23       	and	r24, r24
		{
			data = UART0_receive();
  f2:	e9 f3       	breq	.-6      	; 0xee <main+0x26>
  f4:	22 d0       	rcall	.+68     	; 0x13a <UART0_receive>
			printf("%c", data);
  f6:	c8 2f       	mov	r28, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	78 d0       	rcall	.+240    	; 0x1ec <putchar>
			//if(strcmp(message, "1") == 0)
			if(data == '1')
  fc:	c1 33       	cpi	r28, 0x31	; 49
			{
				PORTG = 0xFF;
  fe:	29 f4       	brne	.+10     	; 0x10a <main+0x42>
 100:	f8 01       	movw	r30, r16
				UART0_print_1_byte_number(data);
 102:	d0 83       	st	Z, r29
 104:	81 e3       	ldi	r24, 0x31	; 49
 106:	1d d0       	rcall	.+58     	; 0x142 <UART0_print_1_byte_number>
 108:	f2 cf       	rjmp	.-28     	; 0xee <main+0x26>
			}
			if(data == '2')
 10a:	c2 33       	cpi	r28, 0x32	; 50
			{
				PORTG = 0x00;
 10c:	81 f7       	brne	.-32     	; 0xee <main+0x26>
 10e:	f8 01       	movw	r30, r16
				UART0_print_1_byte_number(data);
 110:	10 82       	st	Z, r1
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	16 d0       	rcall	.+44     	; 0x142 <UART0_print_1_byte_number>
 116:	eb cf       	rjmp	.-42     	; 0xee <main+0x26>

00000118 <UART0_init>:
{
	for(int i = 0; str[i]; i++)
	{
		UART0_transmit(str[i]);
	}
}
 118:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	89 b9       	out	0x09, r24	; 9
 120:	59 9a       	sbi	0x0b, 1	; 11
 122:	e5 e9       	ldi	r30, 0x95	; 149
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	86 60       	ori	r24, 0x06	; 6
 12a:	80 83       	st	Z, r24
 12c:	54 9a       	sbi	0x0a, 4	; 10
 12e:	53 9a       	sbi	0x0a, 3	; 10
 130:	08 95       	ret

00000132 <UART0_transmit>:
 132:	5d 9b       	sbis	0x0b, 5	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <UART0_transmit>
 136:	8c b9       	out	0x0c, r24	; 12
 138:	08 95       	ret

0000013a <UART0_receive>:
 13a:	5f 9b       	sbis	0x0b, 7	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <UART0_receive>
 13e:	8c b1       	in	r24, 0x0c	; 12
 140:	08 95       	ret

00000142 <UART0_print_1_byte_number>:

void UART0_print_1_byte_number(uint8_t n)
{
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	00 d0       	rcall	.+0      	; 0x150 <UART0_print_1_byte_number+0xe>
 150:	00 d0       	rcall	.+0      	; 0x152 <UART0_print_1_byte_number+0x10>
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 156:	20 e3       	ldi	r18, 0x30	; 48
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	3a 83       	std	Y+2, r19	; 0x02
 15c:	29 83       	std	Y+1, r18	; 0x01
 15e:	1c 82       	std	Y+4, r1	; 0x04
 160:	1b 82       	std	Y+3, r1	; 0x03
	int i, index = 0;
	
	if(n > 0)
 162:	88 23       	and	r24, r24
 164:	19 f1       	breq	.+70     	; 0x1ac <UART0_print_1_byte_number+0x6a>
 166:	fe 01       	movw	r30, r28
 168:	31 96       	adiw	r30, 0x01	; 1
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i = 0; n != 0; i++)
		{
			numString[i] = n % 10 + '0';
 16e:	4d ec       	ldi	r20, 0xCD	; 205
 170:	01 c0       	rjmp	.+2      	; 0x174 <UART0_print_1_byte_number+0x32>
	char numString[4] = "0";
	int i, index = 0;
	
	if(n > 0)
	{
		for(i = 0; n != 0; i++)
 172:	89 01       	movw	r16, r18
		{
			numString[i] = n % 10 + '0';
 174:	84 9f       	mul	r24, r20
 176:	91 2d       	mov	r25, r1
 178:	11 24       	eor	r1, r1
 17a:	96 95       	lsr	r25
 17c:	96 95       	lsr	r25
 17e:	96 95       	lsr	r25
 180:	39 2f       	mov	r19, r25
 182:	33 0f       	add	r19, r19
 184:	23 2f       	mov	r18, r19
 186:	22 0f       	add	r18, r18
 188:	22 0f       	add	r18, r18
 18a:	23 0f       	add	r18, r19
 18c:	82 1b       	sub	r24, r18
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	81 93       	st	Z+, r24
			n = n/10;
 192:	89 2f       	mov	r24, r25
	char numString[4] = "0";
	int i, index = 0;
	
	if(n > 0)
	{
		for(i = 0; n != 0; i++)
 194:	98 01       	movw	r18, r16
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	91 11       	cpse	r25, r1
 19c:	ea cf       	rjmp	.-44     	; 0x172 <UART0_print_1_byte_number+0x30>
		{
			numString[i] = n % 10 + '0';
			n = n/10;
		}
		numString[i] = '\0';
 19e:	fe 01       	movw	r30, r28
 1a0:	e2 0f       	add	r30, r18
 1a2:	f3 1f       	adc	r31, r19
 1a4:	11 82       	std	Z+1, r1	; 0x01
		index = i-1;
	}
	for(i = index; i >= 0; i--)
 1a6:	11 23       	and	r17, r17
 1a8:	1c f4       	brge	.+6      	; 0x1b0 <UART0_print_1_byte_number+0x6e>
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <UART0_print_1_byte_number+0x8a>
}

void UART0_print_1_byte_number(uint8_t n)
{
	char numString[4] = "0";
	int i, index = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	ce 01       	movw	r24, r28
 1b2:	80 0f       	add	r24, r16
 1b4:	91 1f       	adc	r25, r17
 1b6:	9c 01       	movw	r18, r24
 1b8:	2e 5f       	subi	r18, 0xFE	; 254
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
 1bc:	79 01       	movw	r14, r18
		numString[i] = '\0';
		index = i-1;
	}
	for(i = index; i >= 0; i--)
	{
		UART0_transmit(numString[i]);
 1be:	f7 01       	movw	r30, r14
 1c0:	82 91       	ld	r24, -Z
 1c2:	7f 01       	movw	r14, r30
 1c4:	b6 df       	rcall	.-148    	; 0x132 <UART0_transmit>
			n = n/10;
		}
		numString[i] = '\0';
		index = i-1;
	}
	for(i = index; i >= 0; i--)
 1c6:	01 50       	subi	r16, 0x01	; 1
 1c8:	11 09       	sbc	r17, r1
 1ca:	ca f7       	brpl	.-14     	; 0x1be <UART0_print_1_byte_number+0x7c>
	{
		UART0_transmit(numString[i]);
	}
}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	08 95       	ret

000001e2 <UART0_rx_check>:

uint8_t UART0_rx_check(void)
{
	if( UCSR0A & (1<<RXC0) )	// 데이터 수신 대기
 1e2:	8b b1       	in	r24, 0x0b	; 11
	return 1;
	else
	return 0;
 1e4:	88 1f       	adc	r24, r24
 1e6:	88 27       	eor	r24, r24
 1e8:	88 1f       	adc	r24, r24
 1ea:	08 95       	ret

000001ec <putchar>:
 1ec:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 1f0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <fputc>

000001f6 <fputc>:
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	fb 01       	movw	r30, r22
 200:	23 81       	ldd	r18, Z+3	; 0x03
 202:	21 fd       	sbrc	r18, 1
 204:	03 c0       	rjmp	.+6      	; 0x20c <fputc+0x16>
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	9f ef       	ldi	r25, 0xFF	; 255
 20a:	2c c0       	rjmp	.+88     	; 0x264 <fputc+0x6e>
 20c:	22 ff       	sbrs	r18, 2
 20e:	16 c0       	rjmp	.+44     	; 0x23c <fputc+0x46>
 210:	46 81       	ldd	r20, Z+6	; 0x06
 212:	57 81       	ldd	r21, Z+7	; 0x07
 214:	24 81       	ldd	r18, Z+4	; 0x04
 216:	35 81       	ldd	r19, Z+5	; 0x05
 218:	42 17       	cp	r20, r18
 21a:	53 07       	cpc	r21, r19
 21c:	44 f4       	brge	.+16     	; 0x22e <fputc+0x38>
 21e:	a0 81       	ld	r26, Z
 220:	b1 81       	ldd	r27, Z+1	; 0x01
 222:	9d 01       	movw	r18, r26
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	31 83       	std	Z+1, r19	; 0x01
 22a:	20 83       	st	Z, r18
 22c:	8c 93       	st	X, r24
 22e:	26 81       	ldd	r18, Z+6	; 0x06
 230:	37 81       	ldd	r19, Z+7	; 0x07
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	37 83       	std	Z+7, r19	; 0x07
 238:	26 83       	std	Z+6, r18	; 0x06
 23a:	14 c0       	rjmp	.+40     	; 0x264 <fputc+0x6e>
 23c:	8b 01       	movw	r16, r22
 23e:	ec 01       	movw	r28, r24
 240:	fb 01       	movw	r30, r22
 242:	00 84       	ldd	r0, Z+8	; 0x08
 244:	f1 85       	ldd	r31, Z+9	; 0x09
 246:	e0 2d       	mov	r30, r0
 248:	09 95       	icall
 24a:	89 2b       	or	r24, r25
 24c:	e1 f6       	brne	.-72     	; 0x206 <fputc+0x10>
 24e:	d8 01       	movw	r26, r16
 250:	16 96       	adiw	r26, 0x06	; 6
 252:	8d 91       	ld	r24, X+
 254:	9c 91       	ld	r25, X
 256:	17 97       	sbiw	r26, 0x07	; 7
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	17 96       	adiw	r26, 0x07	; 7
 25c:	9c 93       	st	X, r25
 25e:	8e 93       	st	-X, r24
 260:	16 97       	sbiw	r26, 0x06	; 6
 262:	ce 01       	movw	r24, r28
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
