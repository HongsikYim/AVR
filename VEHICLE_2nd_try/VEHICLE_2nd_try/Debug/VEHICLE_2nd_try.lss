
VEHICLE_2nd_try.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  000003fa  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080022e  0080022e  000005bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001429  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6f  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c25  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000712  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042f  00000000  00000000  00003dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000041f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9f 00       	.word	0x009f	; ????
  8e:	a6 00       	.word	0x00a6	; ????
  90:	ad 00       	.word	0x00ad	; ????
  92:	b4 00       	.word	0x00b4	; ????
  94:	bb 00       	.word	0x00bb	; ????
  96:	c2 00       	.word	0x00c2	; ????
  98:	c9 00       	.word	0x00c9	; ????
  9a:	db 00       	.word	0x00db	; ????
  9c:	dd 00       	.word	0x00dd	; ????
  9e:	df 00       	.word	0x00df	; ????
  a0:	e1 00       	.word	0x00e1	; ????
  a2:	e3 00       	.word	0x00e3	; ????
  a4:	e5 00       	.word	0x00e5	; ????
  a6:	e7 00       	.word	0x00e7	; ????

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e1       	ldi	r29, 0x10	; 16
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	12 e0       	ldi	r17, 0x02	; 2
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ea ef       	ldi	r30, 0xFA	; 250
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 32       	cpi	r26, 0x2E	; 46
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	ae e2       	ldi	r26, 0x2E	; 46
  d2:	b2 e0       	ldi	r27, 0x02	; 2
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a8 33       	cpi	r26, 0x38	; 56
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	79 d0       	rcall	.+242    	; 0x1d2 <main>
  e0:	8a c1       	rjmp	.+788    	; 0x3f6 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <INIT_MANUAL_MODE>:
uint8_t select_mode=0, states=0;


void INIT_MANUAL_MODE(void)
{
	states = STATE_STOP;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
  ea:	08 95       	ret

000000ec <SELECTE_DIRECTION>:
}

void SELECTE_DIRECTION(void)
{
	//모드 출력
	UART0_print_string("\r\n");
  ec:	8a ec       	ldi	r24, 0xCA	; 202
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	5a d1       	rcall	.+692    	; 0x3a6 <UART0_print_string>
	UART0_print_string("1. Stop\r\n");
  f2:	8d e1       	ldi	r24, 0x1D	; 29
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	57 d1       	rcall	.+686    	; 0x3a6 <UART0_print_string>
	UART0_print_string("2. Forward\r\n");
  f8:	87 e2       	ldi	r24, 0x27	; 39
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	54 d1       	rcall	.+680    	; 0x3a6 <UART0_print_string>
	UART0_print_string("3. Backward\r\n");
  fe:	84 e3       	ldi	r24, 0x34	; 52
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	51 d1       	rcall	.+674    	; 0x3a6 <UART0_print_string>
	UART0_print_string("4. Right\r\n");
 104:	82 e4       	ldi	r24, 0x42	; 66
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	4e d1       	rcall	.+668    	; 0x3a6 <UART0_print_string>
	UART0_print_string("5. Left\r\n");
 10a:	8d e4       	ldi	r24, 0x4D	; 77
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	4b d1       	rcall	.+662    	; 0x3a6 <UART0_print_string>
	UART0_print_string("6. Speed Up\r\n");
 110:	87 e5       	ldi	r24, 0x57	; 87
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	48 d1       	rcall	.+656    	; 0x3a6 <UART0_print_string>
 116:	85 e6       	ldi	r24, 0x65	; 101
	UART0_print_string("7. Speed Down\r\n");
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	45 c1       	rjmp	.+650    	; 0x3a6 <UART0_print_string>
 11c:	08 95       	ret

0000011e <MANUAL_MODE>:
 11e:	51 d1       	rcall	.+674    	; 0x3c2 <UART0_rx_check>
 120:	88 23       	and	r24, r24
	{
		states = STATE_STOP;
	}
	*/
	
	if (UART0_rx_check())
 122:	09 f4       	brne	.+2      	; 0x126 <MANUAL_MODE+0x8>
 124:	3c c0       	rjmp	.+120    	; 0x19e <MANUAL_MODE+0x80>
	{
		select_mode = UART0_receive();
 126:	3b d1       	rcall	.+630    	; 0x39e <UART0_receive>
 128:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <select_mode>
 12c:	90 e0       	ldi	r25, 0x00	; 0
		switch(select_mode)
 12e:	fc 01       	movw	r30, r24
 130:	f0 97       	sbiw	r30, 0x30	; 48
 132:	e7 30       	cpi	r30, 0x07	; 7
 134:	f1 05       	cpc	r31, r1
 136:	98 f5       	brcc	.+102    	; 0x19e <MANUAL_MODE+0x80>
 138:	ea 5b       	subi	r30, 0xBA	; 186
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	53 c1       	rjmp	.+678    	; 0x3e4 <__tablejump2__>
 13e:	81 e0       	ldi	r24, 0x01	; 1
		{
			//메뉴에서 state 입력
			case '0':
			states = STATE_STOP;
 140:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 1. STATE_STOP\r\n");
 144:	85 e7       	ldi	r24, 0x75	; 117
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	2e d1       	rcall	.+604    	; 0x3a6 <UART0_print_string>
 14a:	29 c0       	rjmp	.+82     	; 0x19e <MANUAL_MODE+0x80>
			break;
 14c:	82 e0       	ldi	r24, 0x02	; 2
			
			case '1':
			states = STATE_GO_FORWARD;
 14e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 2. STATE_GO_FORWARD\r\n");
 152:	8e e8       	ldi	r24, 0x8E	; 142
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	27 d1       	rcall	.+590    	; 0x3a6 <UART0_print_string>
 158:	22 c0       	rjmp	.+68     	; 0x19e <MANUAL_MODE+0x80>
			break;
 15a:	83 e0       	ldi	r24, 0x03	; 3
			
			case '2':
			states = STATE_GO_BACKWARD;
 15c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 3. STATE_GO_BACKWARD\r\n");
 160:	8d ea       	ldi	r24, 0xAD	; 173
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	20 d1       	rcall	.+576    	; 0x3a6 <UART0_print_string>
 166:	1b c0       	rjmp	.+54     	; 0x19e <MANUAL_MODE+0x80>
			break;
			
			case '3':
			states = TURN_RIGHT;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 4. TURN_RIGHT\r\n");
 16e:	8d ec       	ldi	r24, 0xCD	; 205
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	19 d1       	rcall	.+562    	; 0x3a6 <UART0_print_string>
			break;
 174:	14 c0       	rjmp	.+40     	; 0x19e <MANUAL_MODE+0x80>
			
			case '4':
			states = TURN_LEFT;
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 5. TURN LEFT\r\n");
 17c:	86 ee       	ldi	r24, 0xE6	; 230
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	12 d1       	rcall	.+548    	; 0x3a6 <UART0_print_string>
			break;
 182:	0d c0       	rjmp	.+26     	; 0x19e <MANUAL_MODE+0x80>
			
			case '5':
			states = SPEED_UP;
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 6. SPEED UP\r\n");
 18a:	8e ef       	ldi	r24, 0xFE	; 254
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0b d1       	rcall	.+534    	; 0x3a6 <UART0_print_string>
			break;
 190:	06 c0       	rjmp	.+12     	; 0x19e <MANUAL_MODE+0x80>
			
			case '6':
			states = SPEED_DOWN;
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			UART0_print_string("Selected 7. SPEED DOWN\r\n");
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	04 d1       	rcall	.+520    	; 0x3a6 <UART0_print_string>
 19e:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <__data_end>
			break;
		}
		//SELECTE_DIRECTION();
	}

	switch(states)
 1a2:	8e 2f       	mov	r24, r30
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	e7 30       	cpi	r30, 0x07	; 7
 1ac:	f1 05       	cpc	r31, r1
 1ae:	80 f4       	brcc	.+32     	; 0x1d0 <MANUAL_MODE+0xb2>
	{
		//선택한 모드 실행
		case STATE_STOP:
		MOTOR_STOP();
 1b0:	e3 5b       	subi	r30, 0xB3	; 179
		break;
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
		
		case STATE_GO_FORWARD:
		MOTOR_RUN_FORWARD();
 1b4:	17 c1       	rjmp	.+558    	; 0x3e4 <__tablejump2__>
 1b6:	6b c0       	rjmp	.+214    	; 0x28e <MOTOR_STOP>
		
		break;
 1b8:	08 95       	ret
		
		case STATE_GO_BACKWARD:
		MOTOR_RUN_BACKWARD();
 1ba:	76 c0       	rjmp	.+236    	; 0x2a8 <MOTOR_RUN_FORWARD>
 1bc:	08 95       	ret
		
		break;
 1be:	94 c0       	rjmp	.+296    	; 0x2e8 <MOTOR_RUN_BACKWARD>
		
		case TURN_RIGHT:
		MOTOR_RUN_RIGHT();
 1c0:	08 95       	ret
 1c2:	b2 c0       	rjmp	.+356    	; 0x328 <MOTOR_RUN_RIGHT>
		break;
 1c4:	08 95       	ret
		
		case TURN_LEFT:
		MOTOR_RUN_LEFT();
 1c6:	c5 c0       	rjmp	.+394    	; 0x352 <MOTOR_RUN_LEFT>
 1c8:	08 95       	ret
		break;
 1ca:	45 c0       	rjmp	.+138    	; 0x256 <MOTOR_SPEED_UP>
		
		case SPEED_UP:
		MOTOR_SPEED_UP();
 1cc:	08 95       	ret
 1ce:	55 c0       	rjmp	.+170    	; 0x27a <MOTOR_SPEED_DOWN>
		break;
 1d0:	08 95       	ret

000001d2 <main>:

void BLUETOOTH_conection();

int main(void)
{
	stdout = &OUTPUT;
 1d2:	e2 e3       	ldi	r30, 0x32	; 50
 1d4:	f2 e0       	ldi	r31, 0x02	; 2
 1d6:	8e e0       	ldi	r24, 0x0E	; 14
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	93 83       	std	Z+3, r25	; 0x03
 1dc:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24
	
	UART0_init();   //보레이트 9600
 1e6:	ca d0       	rcall	.+404    	; 0x37c <UART0_init>
	INIT_PORT_4_MOTOR();
 1e8:	06 d0       	rcall	.+12     	; 0x1f6 <INIT_PORT_4_MOTOR>
	INIT_INTERRUPT_4_MOTOR();
 1ea:	0c d0       	rcall	.+24     	; 0x204 <INIT_INTERRUPT_4_MOTOR>
	INTIT_4_ULTRASONIC();
 1ec:	ef d0       	rcall	.+478    	; 0x3cc <INTIT_4_ULTRASONIC>
	INIT_MANUAL_MODE();
 1ee:	7a df       	rcall	.-268    	; 0xe4 <INIT_MANUAL_MODE>
 1f0:	7d df       	rcall	.-262    	; 0xec <SELECTE_DIRECTION>
	
	SELECTE_DIRECTION();
 1f2:	95 df       	rcall	.-214    	; 0x11e <MANUAL_MODE>
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <main+0x20>

000001f6 <INIT_PORT_4_MOTOR>:
uint8_t R, L;
uint8_t i = 180;

void INIT_PORT_4_MOTOR(void)
{
	DDRB |= (1 << PB5) | (1 << PB6);
 1f6:	87 b3       	in	r24, 0x17	; 23
 1f8:	80 66       	ori	r24, 0x60	; 96
 1fa:	87 bb       	out	0x17, r24	; 23
	DDRE |= (1 << PE3) | (1 << PE4);
 1fc:	82 b1       	in	r24, 0x02	; 2
 1fe:	88 61       	ori	r24, 0x18	; 24
 200:	82 b9       	out	0x02, r24	; 2
 202:	08 95       	ret

00000204 <INIT_INTERRUPT_4_MOTOR>:
}

void INIT_INTERRUPT_4_MOTOR(void)
{
	TCCR1A |= (1 << WGM10) | (0 << WGM11);
 204:	8f b5       	in	r24, 0x2f	; 47
 206:	81 60       	ori	r24, 0x01	; 1
 208:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (0 << WGM13);
 20a:	8e b5       	in	r24, 0x2e	; 46
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1 << COM1B1) | (1 << COM1A1);
 210:	8f b5       	in	r24, 0x2f	; 47
 212:	80 6a       	ori	r24, 0xA0	; 160
 214:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << CS12) | (1 << CS11) | (1 << CS10);
 216:	8e b5       	in	r24, 0x2e	; 46
 218:	83 60       	ori	r24, 0x03	; 3
 21a:	8e bd       	out	0x2e, r24	; 46
	
	//분주비 64, 고속 PWM
	TCCR3A |= (1 << WGM30) | (0 << WGM31);
 21c:	ab e8       	ldi	r26, 0x8B	; 139
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	8c 91       	ld	r24, X
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33);
 226:	ea e8       	ldi	r30, 0x8A	; 138
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3B1) | (1 << COM3A1);
 230:	8c 91       	ld	r24, X
 232:	80 6a       	ori	r24, 0xA0	; 160
 234:	8c 93       	st	X, r24
	TCCR3B |= (0 << CS32) | (1 << CS31) | (1 << CS30);
 236:	80 81       	ld	r24, Z
 238:	83 60       	ori	r24, 0x03	; 3
 23a:	80 83       	st	Z, r24
	
	OCR1A = 0;
 23c:	1b bc       	out	0x2b, r1	; 43
 23e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
 240:	19 bc       	out	0x29, r1	; 41
 242:	18 bc       	out	0x28, r1	; 40
	OCR3A = 0;
 244:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 248:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 0;
 24c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 250:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 254:	08 95       	ret

00000256 <MOTOR_SPEED_UP>:

}

void MOTOR_SPEED_UP(void)
{
	i ++;
 256:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
	if(i > 250)
 25c:	8b 3f       	cpi	r24, 0xFB	; 251
 25e:	18 f4       	brcc	.+6      	; 0x266 <MOTOR_SPEED_UP+0x10>

}

void MOTOR_SPEED_UP(void)
{
	i ++;
 260:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
 264:	03 c0       	rjmp	.+6      	; 0x26c <MOTOR_SPEED_UP+0x16>
	if(i > 250)
	{
		i = 250;
 266:	8a ef       	ldi	r24, 0xFA	; 250
 268:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
	}
	R = i;
 26c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 270:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <R>
	L = i;
 274:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <L>
 278:	08 95       	ret

0000027a <MOTOR_SPEED_DOWN>:
	//UART0_print_1_byte_number(i);
}

void MOTOR_SPEED_DOWN(void)
{
	i --;
 27a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
	if(i < 1)
	{
		i = 0;
	}
	R = i;
 284:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <R>
	L = i;
 288:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <L>
 28c:	08 95       	ret

0000028e <MOTOR_STOP>:
}

void MOTOR_STOP(void)
{
	OCR1A = 0;
 28e:	1b bc       	out	0x2b, r1	; 43
 290:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
 292:	19 bc       	out	0x29, r1	; 41
 294:	18 bc       	out	0x28, r1	; 40
	OCR3A = 0;
 296:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 29a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = 0;
 29e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2a6:	08 95       	ret

000002a8 <MOTOR_RUN_FORWARD>:
}

void MOTOR_RUN_FORWARD(void)
{
	if(R > L)
 2a8:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <R>
 2ac:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <L>
 2b0:	89 17       	cp	r24, r25
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <MOTOR_RUN_FORWARD+0x12>
	{
		L = R;
 2b4:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <L>
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <MOTOR_RUN_FORWARD+0x1a>
	}
	if(L > R)
 2ba:	98 17       	cp	r25, r24
 2bc:	10 f4       	brcc	.+4      	; 0x2c2 <MOTOR_RUN_FORWARD+0x1a>
	{
		R = L;
 2be:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <R>
	}
	SpeedMotorR1(0);
 2c2:	1b bc       	out	0x2b, r1	; 43
 2c4:	1a bc       	out	0x2a, r1	; 42
	SpeedMotorR2(R);
 2c6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <R>
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	99 bd       	out	0x29, r25	; 41
 2ce:	88 bd       	out	0x28, r24	; 40
	SpeedMotorL1(0);
 2d0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2d4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	SpeedMotorL2(L);
 2d8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <L>
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2e2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2e6:	08 95       	ret

000002e8 <MOTOR_RUN_BACKWARD>:
	*/
}

void MOTOR_RUN_BACKWARD(void)
{
	if(R > L)
 2e8:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <R>
 2ec:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <L>
 2f0:	89 17       	cp	r24, r25
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <MOTOR_RUN_BACKWARD+0x12>
	{
		L = R;
 2f4:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <L>
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <MOTOR_RUN_BACKWARD+0x1a>
	}
	if(L > R)
 2fa:	98 17       	cp	r25, r24
 2fc:	10 f4       	brcc	.+4      	; 0x302 <MOTOR_RUN_BACKWARD+0x1a>
	{
		R = L;
 2fe:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <R>
	}
	SpeedMotorR1(R);
 302:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <R>
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9b bd       	out	0x2b, r25	; 43
 30a:	8a bd       	out	0x2a, r24	; 42
	SpeedMotorR2(0);
 30c:	19 bc       	out	0x29, r1	; 41
 30e:	18 bc       	out	0x28, r1	; 40
	SpeedMotorL1(L);
 310:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <L>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 31a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	SpeedMotorL2(0);
 31e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 322:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 326:	08 95       	ret

00000328 <MOTOR_RUN_RIGHT>:
	SpeedMotorR2(R);
	SpeedMotorL1(0);
	SpeedMotorL2(L);
	*/
	
	SpeedMotorR1(0);
 328:	1b bc       	out	0x2b, r1	; 43
 32a:	1a bc       	out	0x2a, r1	; 42
	SpeedMotorR2(R);
 32c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <R>
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	99 bd       	out	0x29, r25	; 41
 334:	88 bd       	out	0x28, r24	; 40
	SpeedMotorL1(0);
 336:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 33a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	SpeedMotorL2(R/4);
 33e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <R>
 342:	86 95       	lsr	r24
 344:	86 95       	lsr	r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 34c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 350:	08 95       	ret

00000352 <MOTOR_RUN_LEFT>:
	SpeedMotorR2(R);
	SpeedMotorL1(0);
	SpeedMotorL2(L);
	*/
	
	SpeedMotorR1(0);
 352:	1b bc       	out	0x2b, r1	; 43
 354:	1a bc       	out	0x2a, r1	; 42
	SpeedMotorR2(R/4);
 356:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <R>
 35a:	86 95       	lsr	r24
 35c:	86 95       	lsr	r24
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	99 bd       	out	0x29, r25	; 41
 362:	88 bd       	out	0x28, r24	; 40
	SpeedMotorL1(0);
 364:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 368:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	SpeedMotorL2(L);
 36c:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <L>
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 376:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 37a:	08 95       	ret

0000037c <UART0_init>:
	}
	for(i = index; i >= 0; i--)
	{
		UART0_transmit(numString[i]);
	}
}
 37c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 380:	8f ec       	ldi	r24, 0xCF	; 207
 382:	89 b9       	out	0x09, r24	; 9
 384:	59 9a       	sbi	0x0b, 1	; 11
 386:	e5 e9       	ldi	r30, 0x95	; 149
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	86 60       	ori	r24, 0x06	; 6
 38e:	80 83       	st	Z, r24
 390:	54 9a       	sbi	0x0a, 4	; 10
 392:	53 9a       	sbi	0x0a, 3	; 10
 394:	08 95       	ret

00000396 <UART0_transmit>:
 396:	5d 9b       	sbis	0x0b, 5	; 11
 398:	fe cf       	rjmp	.-4      	; 0x396 <UART0_transmit>
 39a:	8c b9       	out	0x0c, r24	; 12
 39c:	08 95       	ret

0000039e <UART0_receive>:
 39e:	5f 9b       	sbis	0x0b, 7	; 11
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <UART0_receive>
 3a2:	8c b1       	in	r24, 0x0c	; 12
 3a4:	08 95       	ret

000003a6 <UART0_print_string>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
 3ac:	88 81       	ld	r24, Y
 3ae:	88 23       	and	r24, r24
 3b0:	29 f0       	breq	.+10     	; 0x3bc <UART0_print_string+0x16>
 3b2:	21 96       	adiw	r28, 0x01	; 1
 3b4:	f0 df       	rcall	.-32     	; 0x396 <UART0_transmit>
 3b6:	89 91       	ld	r24, Y+
 3b8:	81 11       	cpse	r24, r1
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <UART0_print_string+0xe>
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <UART0_rx_check>:

uint8_t UART0_rx_check(void)
{
	if( UCSR0A & (1<<RXC0) )	// 데이터 수신 대기
 3c2:	8b b1       	in	r24, 0x0b	; 11
	return 1;
	else
	return 0;
 3c4:	88 1f       	adc	r24, r24
 3c6:	88 27       	eor	r24, r24
 3c8:	88 1f       	adc	r24, r24
 3ca:	08 95       	ret

000003cc <INTIT_4_ULTRASONIC>:

#include "ULTRASONIC.h"

void INTIT_4_ULTRASONIC(void)
{
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00); //16비트 타이머 1번 타이머/카운터 분주비를 1024로 설정
 3cc:	83 b7       	in	r24, 0x33	; 51
 3ce:	87 60       	ori	r24, 0x07	; 7
 3d0:	83 bf       	out	0x33, r24	; 51
	
	ULTAR_DDR |= (1 << ULTRA_TRIG_1) | (1 << ULTRA_TRIG_2);
 3d2:	e4 e6       	ldi	r30, 0x64	; 100
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	8a 60       	ori	r24, 0x0A	; 10
 3da:	80 83       	st	Z, r24
	ULTAR_DDR &= ~(1 <<ULTRA_ECHO_1) | (1 << ULTRA_TRIG_2);
 3dc:	80 81       	ld	r24, Z
 3de:	8b 7f       	andi	r24, 0xFB	; 251
 3e0:	80 83       	st	Z, r24
 3e2:	08 95       	ret

000003e4 <__tablejump2__>:
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	00 24       	eor	r0, r0
 3ea:	00 1c       	adc	r0, r0
 3ec:	0b be       	out	0x3b, r0	; 59
 3ee:	07 90       	elpm	r0, Z+
 3f0:	f6 91       	elpm	r31, Z
 3f2:	e0 2d       	mov	r30, r0
 3f4:	09 94       	ijmp

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
