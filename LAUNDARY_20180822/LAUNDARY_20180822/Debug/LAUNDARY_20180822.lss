
LAUNDARY_20180822.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003a0  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800116  00800116  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138b  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd4  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000991  00000000  00000000  00002523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ef  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000794  00000000  00000000  0000365f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c9 d0       	rcall	.+402    	; 0x256 <main>
  c4:	6b c1       	rjmp	.+726    	; 0x39c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GET_BUTTON_STATE_1>:
}

uint8_t GET_BUTTON_STATE_1(void)
{
	static uint8_t state_previous = 1, state_current;
	state_current = (PINF & 0x02) >> 1;
  c8:	80 b1       	in	r24, 0x00	; 0
  ca:	86 95       	lsr	r24
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state_current.1948>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	9c e9       	ldi	r25, 0x9C	; 156
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <GET_BUTTON_STATE_1+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <GET_BUTTON_STATE_1+0x14>
  dc:	00 00       	nop
	_delay_ms(10);
	if( state_current != state_previous)
  de:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <state_current.1948>
  e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state_previous.1947>
  e6:	98 17       	cp	r25, r24
  e8:	39 f0       	breq	.+14     	; 0xf8 <GET_BUTTON_STATE_1+0x30>
	{
		state_previous = state_current;
  ea:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state_previous.1947>
		if(state_current == 0)
		{
			return 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	99 23       	and	r25, r25
  f2:	19 f0       	breq	.+6      	; 0xfa <GET_BUTTON_STATE_1+0x32>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret
		}
	}
	return 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0
}
  fa:	08 95       	ret

000000fc <GET_BUTTON_STATE_2>:

uint8_t GET_BUTTON_STATE_2(void)
{
	static uint8_t state_previous = 1, state_current;
	state_current = (PINF & 0x04) >> 2;
  fc:	80 b1       	in	r24, 0x00	; 0
  fe:	82 fb       	bst	r24, 2
 100:	88 27       	eor	r24, r24
 102:	80 f9       	bld	r24, 0
 104:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state_current.1953>
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <GET_BUTTON_STATE_2+0x10>
 110:	00 c0       	rjmp	.+0      	; 0x112 <GET_BUTTON_STATE_2+0x16>
 112:	00 00       	nop
	_delay_ms(10);
	if( state_current != state_previous)
 114:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <state_current.1953>
 118:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state_previous.1952>
 11c:	98 17       	cp	r25, r24
 11e:	39 f0       	breq	.+14     	; 0x12e <GET_BUTTON_STATE_2+0x32>
	{
		state_previous = state_current;
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <state_previous.1952>
		if(state_current == 0)
		{
			return 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	99 23       	and	r25, r25
 128:	19 f0       	breq	.+6      	; 0x130 <GET_BUTTON_STATE_2+0x34>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret
		}
	}
	return 0;
 12e:	80 e0       	ldi	r24, 0x00	; 0
}
 130:	08 95       	ret

00000132 <GET_BUTTON_STATE_3>:

uint8_t GET_BUTTON_STATE_3(void)
{
	static uint8_t state_previous = 1, state_current;
	state_current = (PINF & 0x08) >> 3;
 132:	80 b1       	in	r24, 0x00	; 0
 134:	83 fb       	bst	r24, 3
 136:	88 27       	eor	r24, r24
 138:	80 f9       	bld	r24, 0
 13a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9c e9       	ldi	r25, 0x9C	; 156
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <GET_BUTTON_STATE_3+0x10>
 146:	00 c0       	rjmp	.+0      	; 0x148 <GET_BUTTON_STATE_3+0x16>
 148:	00 00       	nop
	_delay_ms(10);
	if( state_current != state_previous)
 14a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__data_end>
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 152:	98 17       	cp	r25, r24
 154:	39 f0       	breq	.+14     	; 0x164 <GET_BUTTON_STATE_3+0x32>
	{
		state_previous = state_current;
 156:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if(state_current == 0)
		{
			return 1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	99 23       	and	r25, r25
 15e:	19 f0       	breq	.+6      	; 0x166 <GET_BUTTON_STATE_3+0x34>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret
		}
	}
	return 0;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret

00000168 <LCD_pulse_enable>:
#include "LCD.h"


void LCD_pulse_enable(void)
{
	PORT_CONTROL |= (1 << E_PIN);
 168:	df 9a       	sbi	0x1b, 7	; 27
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_pulse_enable+0x6>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_pulse_enable+0xc>
 174:	00 00       	nop
	_delay_ms(1);
	PORT_CONTROL &= ~(1 << E_PIN);
 176:	df 98       	cbi	0x1b, 7	; 27
 178:	8f e9       	ldi	r24, 0x9F	; 159
 17a:	9f e0       	ldi	r25, 0x0F	; 15
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_pulse_enable+0x14>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_pulse_enable+0x1a>
 182:	00 00       	nop
 184:	08 95       	ret

00000186 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
	PORT_CONTROL |= (1 << RS_PIN);
 186:	dd 9a       	sbi	0x1b, 5	; 27
	PORT_DATA = data;
 188:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
 18a:	ee df       	rcall	.-36     	; 0x168 <LCD_pulse_enable>
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9f e1       	ldi	r25, 0x1F	; 31
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_write_data+0xa>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_write_data+0x10>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <LCD_write_command>:
	_delay_ms(2);
}

void LCD_write_command(uint8_t command)
{
	PORT_CONTROL &= ~(1 << RS_PIN);
 19a:	dd 98       	cbi	0x1b, 5	; 27
	PORT_DATA = command;
 19c:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
 19e:	e4 df       	rcall	.-56     	; 0x168 <LCD_pulse_enable>
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9f e1       	ldi	r25, 0x1F	; 31
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_write_command+0xa>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_write_command+0x10>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	f4 df       	rcall	.-24     	; 0x19a <LCD_write_command>
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9f e1       	ldi	r25, 0x1F	; 31
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_clear+0x8>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_clear+0xe>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <LCD_init>:
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	80 e7       	ldi	r24, 0x70	; 112
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <LCD_init+0x6>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_init+0x10>
 1d0:	00 00       	nop
void LCD_init(void)
{
	_delay_ms(50);
	
	// 연결 핀을 출력을 설정
	DDR_DATA = 0xFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
 1d6:	15 ba       	out	0x15, r1	; 21
	DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);
 1d8:	8a b3       	in	r24, 0x1a	; 26
 1da:	80 6e       	ori	r24, 0xE0	; 224
 1dc:	8a bb       	out	0x1a, r24	; 26
	
	// R/W 핀으로 LOW를 출력하여 쓰기 전용으로 사용
	PORT_CONTROL &= ~(1<< RW_PIN);
 1de:	de 98       	cbi	0x1b, 6	; 27
	
	LCD_write_command(COMMAND_8_BIT_MODE);
 1e0:	88 e3       	ldi	r24, 0x38	; 56
 1e2:	db df       	rcall	.-74     	; 0x19a <LCD_write_command>
	
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_clear();
 1e6:	d9 df       	rcall	.-78     	; 0x19a <LCD_write_command>
	
	LCD_write_command(0x06);
 1e8:	e2 df       	rcall	.-60     	; 0x1ae <LCD_clear>
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	d6 cf       	rjmp	.-84     	; 0x19a <LCD_write_command>
 1ee:	08 95       	ret

000001f0 <LCD_write_string>:
}

void LCD_write_string(char *string)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; string[i]; i ++)
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	51 f0       	breq	.+20     	; 0x212 <LCD_write_string+0x22>
 1fe:	8f 01       	movw	r16, r30
 200:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_write_data(string[i]);
 202:	c1 df       	rcall	.-126    	; 0x186 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i = 0; string[i]; i ++)
 204:	cf 5f       	subi	r28, 0xFF	; 255
 206:	f8 01       	movw	r30, r16
 208:	ec 0f       	add	r30, r28
 20a:	f1 1d       	adc	r31, r1
 20c:	80 81       	ld	r24, Z
 20e:	81 11       	cpse	r24, r1
 210:	f8 cf       	rjmp	.-16     	; 0x202 <LCD_write_string+0x12>
	{
		LCD_write_data(string[i]);
	}
}
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);
 21a:	81 70       	andi	r24, 0x01	; 1
 21c:	6f 70       	andi	r22, 0x0F	; 15
 21e:	90 e4       	ldi	r25, 0x40	; 64
 220:	89 9f       	mul	r24, r25
 222:	60 0d       	add	r22, r0
 224:	11 24       	eor	r1, r1
 226:	86 2f       	mov	r24, r22
 228:	80 58       	subi	r24, 0x80	; 128
 22a:	b7 cf       	rjmp	.-146    	; 0x19a <LCD_write_command>
 22c:	08 95       	ret

0000022e <INIT_PORT>:
enum LAUNDRY_state { IDLE, WASH, DRY} L_state;


void INIT_PORT(void)
{
	DDRB = 0xF0;
 22e:	80 ef       	ldi	r24, 0xF0	; 240
 230:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0xFF;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 236:	12 ba       	out	0x12, r1	; 18
 238:	08 95       	ret

0000023a <INIT_INTERRUPT>:
}

void INIT_INTERRUPT(void)
{
	//분주비 64, 고속 PWM
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (0 << COM00) | (1 << WGM01) | (1 << CS02) | (0 << CS01) | (0 << CS00);
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	8c 66       	ori	r24, 0x6C	; 108
 23e:	83 bf       	out	0x33, r24	; 51
	TCCR2 |= (1 << WGM20) | (1 << COM21) | (0 << COM20) | (1 << WGM21) | (0 << CS22) | (1 << CS21) | (1 << CS00);
 240:	85 b5       	in	r24, 0x25	; 37
 242:	8b 66       	ori	r24, 0x6B	; 107
 244:	85 bd       	out	0x25, r24	; 37
	
	OCR0 = 125;
 246:	8d e7       	ldi	r24, 0x7D	; 125
 248:	81 bf       	out	0x31, r24	; 49
	OCR2 = 125;
 24a:	83 bd       	out	0x23, r24	; 35
	
	TIMSK |= (1 << TOIE0);
 24c:	87 b7       	in	r24, 0x37	; 55
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	87 bf       	out	0x37, r24	; 55
	//EIMSK |= (1 << INT0);
	//EICRA |= (1 << ISC01);
	sei();
 252:	78 94       	sei
 254:	08 95       	ret

00000256 <main>:

int main(void)
{
	uint8_t washFlag = 0, dryFlag =0;
	
	INIT_PORT();
 256:	eb df       	rcall	.-42     	; 0x22e <INIT_PORT>
	INIT_INTERRUPT();
 258:	f0 df       	rcall	.-32     	; 0x23a <INIT_INTERRUPT>
	LCD_init();
 25a:	b2 df       	rcall	.-156    	; 0x1c0 <LCD_init>
	
	LCD_write_string("LAUNDARY");
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	c7 df       	rcall	.-114    	; 0x1f0 <LCD_write_string>
	LCD_goto_XY(1,0);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	d9 df       	rcall	.-78     	; 0x21a <LCD_goto_XY>
 268:	10 e0       	ldi	r17, 0x00	; 0
	sei();
}

int main(void)
{
	uint8_t washFlag = 0, dryFlag =0;
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	02 e0       	ldi	r16, 0x02	; 2
				}
				else if (dryFlag)
				{
					washFlag = 0;
					dryFlag = 0;
					L_state =  DRY;
 26e:	c1 e0       	ldi	r28, 0x01	; 1
			{
				if (washFlag)
				{
					washFlag = 0;
					dryFlag = 0;
					L_state =  WASH;
 270:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <L_state>
	
	/* Replace with your application code */
	while (1)
	{
		
		switch(L_state)
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	81 f1       	breq	.+96     	; 0x2d8 <main+0x82>
 278:	18 f0       	brcs	.+6      	; 0x280 <main+0x2a>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	89 f1       	breq	.+98     	; 0x2e0 <main+0x8a>
 27e:	fa cf       	rjmp	.-12     	; 0x274 <main+0x1e>
		{
			case IDLE:
			OCR0 = 0;
 280:	11 be       	out	0x31, r1	; 49
			OCR2 = 0;
 282:	13 bc       	out	0x23, r1	; 35
			
			if (GET_BUTTON_STATE_1()) // 세탁모드
 284:	21 df       	rcall	.-446    	; 0xc8 <GET_BUTTON_STATE_1>
 286:	88 23       	and	r24, r24
 288:	51 f0       	breq	.+20     	; 0x29e <main+0x48>
			{
				washFlag = 1;
				dryFlag = 0;
				PORTD = 0x01;
				LCD_goto_XY(1,0);
 28a:	c2 bb       	out	0x12, r28	; 18
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	8c 2f       	mov	r24, r28
				LCD_write_string("WASH");
 290:	c4 df       	rcall	.-120    	; 0x21a <LCD_goto_XY>
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	ac df       	rcall	.-168    	; 0x1f0 <LCD_write_string>
			OCR2 = 0;
			
			if (GET_BUTTON_STATE_1()) // 세탁모드
			{
				washFlag = 1;
				dryFlag = 0;
 298:	10 e0       	ldi	r17, 0x00	; 0
			OCR0 = 0;
			OCR2 = 0;
			
			if (GET_BUTTON_STATE_1()) // 세탁모드
			{
				washFlag = 1;
 29a:	dc 2f       	mov	r29, r28
				dryFlag = 0;
				PORTD = 0x01;
				LCD_goto_XY(1,0);
				LCD_write_string("WASH");
			}
			else if (GET_BUTTON_STATE_2()) // 탈수 모드
 29c:	e9 cf       	rjmp	.-46     	; 0x270 <main+0x1a>
 29e:	2e df       	rcall	.-420    	; 0xfc <GET_BUTTON_STATE_2>
 2a0:	88 23       	and	r24, r24
			{
				washFlag = 0;
				dryFlag = 1;
				PORTD = 0x02;
 2a2:	51 f0       	breq	.+20     	; 0x2b8 <main+0x62>
				LCD_goto_XY(1,0);
 2a4:	02 bb       	out	0x12, r16	; 18
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	8c 2f       	mov	r24, r28
				LCD_write_string("DRY ");
 2aa:	b7 df       	rcall	.-146    	; 0x21a <LCD_goto_XY>
 2ac:	81 e1       	ldi	r24, 0x11	; 17
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	9f df       	rcall	.-194    	; 0x1f0 <LCD_write_string>
				LCD_write_string("WASH");
			}
			else if (GET_BUTTON_STATE_2()) // 탈수 모드
			{
				washFlag = 0;
				dryFlag = 1;
 2b2:	1c 2f       	mov	r17, r28
				LCD_goto_XY(1,0);
				LCD_write_string("WASH");
			}
			else if (GET_BUTTON_STATE_2()) // 탈수 모드
			{
				washFlag = 0;
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
 2b6:	dc cf       	rjmp	.-72     	; 0x270 <main+0x1a>
				dryFlag = 1;
				PORTD = 0x02;
				LCD_goto_XY(1,0);
				LCD_write_string("DRY ");
			}
			else if (GET_BUTTON_STATE_3()) // 동작
 2b8:	3c df       	rcall	.-392    	; 0x132 <GET_BUTTON_STATE_3>
 2ba:	88 23       	and	r24, r24
 2bc:	c9 f2       	breq	.-78     	; 0x270 <main+0x1a>
 2be:	dd 23       	and	r29, r29
			{
				if (washFlag)
 2c0:	29 f0       	breq	.+10     	; 0x2cc <main+0x76>
				{
					washFlag = 0;
					dryFlag = 0;
					L_state =  WASH;
 2c2:	c0 93 19 01 	sts	0x0119, r28	; 0x800119 <L_state>
			else if (GET_BUTTON_STATE_3()) // 동작
			{
				if (washFlag)
				{
					washFlag = 0;
					dryFlag = 0;
 2c6:	10 e0       	ldi	r17, 0x00	; 0
			}
			else if (GET_BUTTON_STATE_3()) // 동작
			{
				if (washFlag)
				{
					washFlag = 0;
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
					dryFlag = 0;
					L_state =  WASH;
				}
				else if (dryFlag)
 2ca:	d2 cf       	rjmp	.-92     	; 0x270 <main+0x1a>
 2cc:	11 23       	and	r17, r17
				{
					washFlag = 0;
					dryFlag = 0;
					L_state =  DRY;
 2ce:	81 f2       	breq	.-96     	; 0x270 <main+0x1a>
 2d0:	00 93 19 01 	sts	0x0119, r16	; 0x800119 <L_state>
					L_state =  WASH;
				}
				else if (dryFlag)
				{
					washFlag = 0;
					dryFlag = 0;
 2d4:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			break;
			
			case WASH:
			MOTOR_WASH_MODE();
 2d6:	cc cf       	rjmp	.-104    	; 0x270 <main+0x1a>
 2d8:	38 d0       	rcall	.+112    	; 0x34a <MOTOR_WASH_MODE>
			L_state = IDLE;
 2da:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <L_state>
			break;
 2de:	c8 cf       	rjmp	.-112    	; 0x270 <main+0x1a>
			
			case DRY:
			MOTOR_DRY_MODE();
 2e0:	51 d0       	rcall	.+162    	; 0x384 <MOTOR_DRY_MODE>
 2e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <L_state>
			L_state = IDLE;
 2e6:	c4 cf       	rjmp	.-120    	; 0x270 <main+0x1a>

000002e8 <MOTOR_ACCELERATION>:
#include "MOTOR_1.h"


void MOTOR_ACCELERATION(void)
{
	for(OCR0 = 0; OCR0 <= 200; OCR0 ++)
 2e8:	11 be       	out	0x31, r1	; 49
 2ea:	81 b7       	in	r24, 0x31	; 49
 2ec:	89 3c       	cpi	r24, 0xC9	; 201
 2ee:	78 f4       	brcc	.+30     	; 0x30e <MOTOR_ACCELERATION+0x26>
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	89 ef       	ldi	r24, 0xF9	; 249
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <MOTOR_ACCELERATION+0xe>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <MOTOR_ACCELERATION+0x18>
 300:	00 00       	nop
 302:	81 b7       	in	r24, 0x31	; 49
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	81 bf       	out	0x31, r24	; 49
 308:	81 b7       	in	r24, 0x31	; 49
 30a:	89 3c       	cpi	r24, 0xC9	; 201
 30c:	88 f3       	brcs	.-30     	; 0x2f0 <MOTOR_ACCELERATION+0x8>
 30e:	08 95       	ret

00000310 <MOTOR_DECLERATION>:
	}
}

void MOTOR_DECLERATION(void)
{
	for(OCR0 = 200; OCR0 > 0; OCR0 --)
 310:	88 ec       	ldi	r24, 0xC8	; 200
 312:	81 bf       	out	0x31, r24	; 49
 314:	81 b7       	in	r24, 0x31	; 49
 316:	88 23       	and	r24, r24
 318:	79 f0       	breq	.+30     	; 0x338 <MOTOR_DECLERATION+0x28>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	89 ef       	ldi	r24, 0xF9	; 249
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <MOTOR_DECLERATION+0x10>
 328:	00 c0       	rjmp	.+0      	; 0x32a <MOTOR_DECLERATION+0x1a>
 32a:	00 00       	nop
 32c:	81 b7       	in	r24, 0x31	; 49
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	81 bf       	out	0x31, r24	; 49
 332:	81 b7       	in	r24, 0x31	; 49
 334:	81 11       	cpse	r24, r1
 336:	f1 cf       	rjmp	.-30     	; 0x31a <MOTOR_DECLERATION+0xa>
 338:	08 95       	ret

0000033a <MOTOR_RUN_CLOWISE>:
	}
}

void MOTOR_RUN_CLOWISE(void)
{
	OCR0 = 0;
 33a:	11 be       	out	0x31, r1	; 49
	OCR2 = 150;
 33c:	86 e9       	ldi	r24, 0x96	; 150
 33e:	83 bd       	out	0x23, r24	; 35
 340:	08 95       	ret

00000342 <MOTOR_RUN_UNCLOWISE>:
}

void MOTOR_RUN_UNCLOWISE(void)
{
	OCR0 = 150;
 342:	86 e9       	ldi	r24, 0x96	; 150
 344:	81 bf       	out	0x31, r24	; 49
	OCR2 = 0;
 346:	13 bc       	out	0x23, r1	; 35
 348:	08 95       	ret

0000034a <MOTOR_WASH_MODE>:
}

void MOTOR_WASH_MODE(void)
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	c5 e0       	ldi	r28, 0x05	; 5
 350:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 5; i ++)
	{
		MOTOR_RUN_CLOWISE();
 352:	f3 df       	rcall	.-26     	; 0x33a <MOTOR_RUN_CLOWISE>
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	83 ed       	ldi	r24, 0xD3	; 211
 358:	90 e3       	ldi	r25, 0x30	; 48
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <MOTOR_WASH_MODE+0x10>
 362:	00 c0       	rjmp	.+0      	; 0x364 <MOTOR_WASH_MODE+0x1a>
		_delay_ms(1000);
		MOTOR_RUN_UNCLOWISE();
 364:	00 00       	nop
 366:	ed df       	rcall	.-38     	; 0x342 <MOTOR_RUN_UNCLOWISE>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	83 ed       	ldi	r24, 0xD3	; 211
 36c:	90 e3       	ldi	r25, 0x30	; 48
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <MOTOR_WASH_MODE+0x24>
 376:	00 c0       	rjmp	.+0      	; 0x378 <MOTOR_WASH_MODE+0x2e>
 378:	00 00       	nop
 37a:	21 97       	sbiw	r28, 0x01	; 1
	OCR2 = 0;
}

void MOTOR_WASH_MODE(void)
{
	for(int i = 0; i < 5; i ++)
 37c:	51 f7       	brne	.-44     	; 0x352 <MOTOR_WASH_MODE+0x8>
		MOTOR_RUN_CLOWISE();
		_delay_ms(1000);
		MOTOR_RUN_UNCLOWISE();
		_delay_ms(1000);
	}
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <MOTOR_DRY_MODE>:

void MOTOR_DRY_MODE(void)
{
	MOTOR_ACCELERATION();
 384:	b1 df       	rcall	.-158    	; 0x2e8 <MOTOR_ACCELERATION>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	8b e7       	ldi	r24, 0x7B	; 123
 38a:	92 e9       	ldi	r25, 0x92	; 146
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <MOTOR_DRY_MODE+0x8>
 394:	00 c0       	rjmp	.+0      	; 0x396 <MOTOR_DRY_MODE+0x12>
	_delay_ms(3000);
	MOTOR_DECLERATION();
 396:	00 00       	nop
 398:	bb cf       	rjmp	.-138    	; 0x310 <MOTOR_DECLERATION>
 39a:	08 95       	ret

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
